@inherits MudComponentBase;

@inject ISnackbar Snackbar
@inject ITranslationsService t
@inject IDialogService DialogService
@inject IWorkspaceService WorkspaceService
@inject ISessionService SessionService

<MudTable T="SessionListItem" Items="Sessions" Hover="true" Outlined="false" Square="true" Elevation="0" FixedHeader="true" FixedFooter="true"
          Height="100%" Loading="@Loading" Class="@Class" RowStyle="cursor: pointer;"
		  Style="@TableStyle"
			AllowUnsorted="false"
          OnRowClick="OnRowClick">
	<ToolBarContent>
		<MudText Class="mr-2" Typo="Typo.h6">@t.T("sessionList", "toolbarTitle")</MudText>
		<MudSpacer/>
		<MudButtonGroup OverrideStyles="false">

			<MudIconButton Title="@t.T("sessionList", "refresh")" DisableElevation="true" Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Variant="Variant.Filled" OnClick="Initialize" />
			<MudIconButton Title="@t.T("sessionList", "createSession")" DisableElevation="true" Icon="@Icons.Material.Filled.AddBox" Color="Color.Default" Variant="Variant.Filled" OnClick="CreateSession" Disabled="false" />
			<MudMenu Dense="true">
				<ActivatorContent>
					<MudIconButton Title="@t.T("sessionList", "more")" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
				</ActivatorContent>
				<ChildContent>
					<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Refresh"
								  OnClick="Initialize" OnTouch="Initialize" Disabled="false">
						@t.T("sessionList", "refreshView")
					</MudMenuItemW>
					<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.AddBox"
								  OnClick="CreateSession" OnTouch="CreateSession" Disabled="_canManageSessions">
						@t.T("sessionList", "createSession")
					</MudMenuItemW>
				</ChildContent>
			</MudMenu>
		</MudButtonGroup>


	</ToolBarContent>
	<HeaderContent>
		<MudTh>
			<MudTableSortLabel SortBy="new Func<SessionListItem, object>(x => x.Name)">
				@t.T("sessionList", "headerName")
			</MudTableSortLabel>
		</MudTh>
		<MudTh>
			<MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<SessionListItem, object>(x => x.ScheduledDate)">
				@t.T("sessionList", "headerDate")
			</MudTableSortLabel>
		</MudTh>
		<MudTh/>

	</HeaderContent>
	<RowTemplate>
		<MudTd DataLabel="@t.T("sessionList", "dataLabelName")">@context.Name</MudTd>
		<MudTd DataLabel="@t.T("sessionList", "dataLabelScheduledFor")">@context.ScheduledDate.ToLocalTime().ToString()</MudTd>
		<MudTd DataLabel="@t.T("sessionList", "actions")"  Style="text-align: right">
			<MudMenu Dense="true">
				<ActivatorContent>
					<MudIconButton Title="@t.T("sessionList", "actions")" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
				</ActivatorContent>
				<ChildContent>
					<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.OpenInBrowser" OnTouch="() => SelectSession(context)" OnClick="() => SelectSession(context)">@t.T("sessionList", "open")</MudMenuItemW>
					<MudMenuItemW Disabled="!_canManageSessions" IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnTouch="() => DeleteSession(context)" OnClick="() => DeleteSession(context)">@t.T("sessionList", "delete")</MudMenuItemW>
				</ChildContent>
			</MudMenu>
		</MudTd>
	</RowTemplate>
</MudTable>

@code
{
	[Parameter]
	public long WorkspaceId { get; set; }

	[Parameter]
	public EventCallback<long> OnSessionSelected { get; set; }

	[CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

	private string TableStyle => LayoutState.Xs
	? $"min-height: 245px; display:grid; grid-template-rows: 0fr 0fr 1fr; {Style}"
	: $"min-height: 245px; display:grid; grid-template-rows: 0fr 1fr; {Style}";

	private IEnumerable<SessionListItem>? Sessions;
	private bool _canManageSessions = false;
	bool Loading => Sessions is null;

	private async Task SelectSession(SessionListItem session)
	{
		await OnSessionSelected.InvokeAsync(session.Id);
	}

	private async Task OnRowClick(TableRowClickEventArgs<SessionListItem> tableClick)
	{
		await SelectSession(tableClick.Item);
	}

	private async Task Initialize()
	{
		Sessions = await SessionService.GetWorkspaceSessionsAsync(WorkspaceId);
		_canManageSessions = await WorkspaceService.CanManageWorkspaceSessionsAsync(WorkspaceId);
	}

	protected override async Task OnParametersSetAsync()
	{
		await Initialize();
	}

	private async Task CreateSession()
	{
		var parameters = new DialogParameters { ["WorkspaceId"] = WorkspaceId };
		var result = await DialogService.Show<CreateSessionDialog>(t.T("sessionList", "createNewSession"), parameters).Result;
		if (result.Canceled) return;
		await Initialize();
	}

	private async Task DeleteSession(SessionListItem session)
	{
		if (!await DialogService.ShowConfirmationDialog(t.T("sessionList", "deleteSessionTitle"), t.T("common", "delete"), t.T("sessionList", "session"), session.Name, true)) return;
		try
		{
			await SessionService.DeleteSessionAsync(session.Id);
			Snackbar.Add(t.T("sessionList", "sessionDeleted", session.Name), Severity.Success);
			await Initialize();
		}
		catch
		{
			Snackbar.Add(t.T("sessionList", "failedToDeleteSession", session.Name), Severity.Error);
		}
	}

}