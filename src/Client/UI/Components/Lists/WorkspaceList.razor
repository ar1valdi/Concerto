﻿@using Microsoft.AspNetCore.Components.Authorization

@inherits MudComponentBase

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IWorkspaceService WorkspaceService
@inject ITranslationsService t


@if (Loading)
{
	<LoadingIndicator Color="Color.Primary" Size="Size.Large"/>
}
else
{
	<MudTable T="WorkspaceListItem" Items="Workspaces" Hover="true" Elevation="0" Filter="new Func<WorkspaceListItem, bool>(WorkspaceFilter)"
		  Style="@TableStyle" Class="@Class" Height="100%" FixedHeader="true" FixedFooter="true" Outlined="true"
		  RowsPerPage="PageSize.Default" RowStyle="cursor: pointer;" OnRowClick="OnRowClick">
		<ToolBarContent>
			<MudText Class="mr-2" Typo="Typo.subtitle1">@t.T("workspaceList", "yourWorkspaces")</MudText>
			<MudSpacer/>
			<MudTextField @bind-Value="searchString" Placeholder="@t.T("workspaceList", "search")" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
					  Class="mt-0 mr-2" Style="" />
			<MudSpacer/>
			<MudButtonGroup OverrideStyles="false">

				@if (LayoutState.SmAndUp)
				{
					<MudIconButton Title="@t.T("workspaceList", "refresh")" DisableElevation="true" Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Variant="Variant.Filled" OnClick="Initialize" />
					@* Workspace creation hidden - using single workspace mode *@
					@* @if (ManagementEnabled)
					{
						<AuthorizeView Policy="@AuthorizationPolicies.IsModerator.Name">
						<MudIconButton Title="@t.T("workspaceList", "createWorkspace")" DisableElevation="true" Icon="@Icons.Material.Filled.AddBox" Color="Color.Default" Variant="Variant.Filled" OnClick="CreateWorkspace" Disabled="false" />
						</AuthorizeView>
					} *@
				}

				<MudMenu Dense="true">
					<ActivatorContent>
					<MudIconButton Title="@t.T("workspaceList", "more")" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
					</ActivatorContent>
					<ChildContent>
						<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Refresh"
								  OnTouch="Initialize" OnClick="Initialize">
							@t.T("workspaceList", "refreshView")
						</MudMenuItemW>
						@* Workspace creation hidden - using single workspace mode *@
						@* @if (ManagementEnabled)
						@if (ManagementEnabled)
						{
							<AuthorizeView Policy="@AuthorizationPolicies.IsModerator.Name">
								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.AddBox"
									  OnClick="CreateWorkspace" OnTouch="CreateWorkspace" Disabled="false">
								@t.T("workspaceList", "createWorkspace")
								</MudMenuItemW>
						} *@
						}

					</ChildContent>
				</MudMenu>
			</MudButtonGroup>
		</ToolBarContent>
		<HeaderContent>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<WorkspaceListItem, object>(x => x.Name)">@t.T("workspaceList", "workspaceNameHeader")</MudTableSortLabel>
			</MudTh>
			<MudTh>
				<MudTableSortLabel SortBy="new Func<WorkspaceListItem, object>(x => x.CreatedDate)" InitialDirection="SortDirection.Descending">@t.T("workspaceList", "creationDateHeader")</MudTableSortLabel>
			</MudTh>
			<MudTh></MudTh>
		</HeaderContent>
		<RowTemplate>
			<MudTd DataLabel="@t.T("workspaceList", "nameColumn")">
				<MudText>@context.Name</MudText>
			</MudTd>
			<MudTd DataLabel="@t.T("workspaceList", "createdOnColumn")">
				<MudText>@context.CreatedDate</MudText>
			</MudTd>
			<MudTd DataLabel="@t.T("workspaceList", "actions")" Style="text-align: right">

				<MudMenu Dense="true">
					<ActivatorContent>
						<MudIconButton Title="@t.T("workspaceList", "actions")" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled"/>
					</ActivatorContent>
					<ChildContent>
							<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@SelectIcon" OnTouch="() => SelectWorkspace(context)" OnClick="() => SelectWorkspace(context)">@SelectLabel</MudMenuItemW>
						@* Workspace cloning hidden - using single workspace mode *@
						@* @if (ManagementEnabled)
						{
							<AuthorizeView Policy="@AuthorizationPolicies.IsModerator.Name" Context="auth">
								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.CopyAll" OnTouch="() => CloneWorkspace(context)" OnClick="() => CloneWorkspace(context)">@t.T("workspaceList", "clone")</MudMenuItemW>
							</AuthorizeView>
						} *@

					</ChildContent>
				</MudMenu>
			</MudTd>
		</RowTemplate>
		<PagerContent>
			<MudTablePager PageSizeOptions="PageSize.DefaultOptions"/>
		</PagerContent>
	</MudTable>
}


@code {
	[CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

	[Parameter]
	public EventCallback<long> OnWorkspaceSelected { get; set; }

	private string TableStyle => LayoutState.Xs
	? $"min-height: 245px; display:grid; grid-template-rows: 0fr 0fr 1fr; {Style}"
	: $"min-height: 245px; display:grid; grid-template-rows: 0fr 1fr; {Style}";

	[Parameter]
	public string SelectLabel { get; set; } = "Open";

	[Parameter]
	public string SelectIcon { get; set; } = Icons.Material.Filled.OpenInBrowser;

	[Parameter]
	public bool ManagementEnabled { get; set; } = true;

	[Parameter]
	public IEnumerable<long> WithoutWorkspaceIds { get; set; } = Enumerable.Empty<long>();

	private string searchString = string.Empty;

	private bool Loading => Workspaces is null;

	private IEnumerable<WorkspaceListItem>? Workspaces { get; set; }


	protected async Task Initialize()
	{
		Workspaces = (await WorkspaceService.GetCurrentUserWorkspacesAsync()).ExceptBy(WithoutWorkspaceIds, x => x.Id);
	}

	protected override async Task OnInitializedAsync()
	{
		await Initialize();
	}

	private async Task SelectWorkspace(WorkspaceListItem workspace)
	{
		await OnWorkspaceSelected.InvokeAsync(workspace.Id);
	}

	private async Task DeleteWorkspace(WorkspaceListItem workspace)
	{
		if (!await DialogService.ShowConfirmationDialog(t.T("workspaceList", "deleteWorkspaceTitle"), t.T("common", "delete"), t.T("workspaceList", "workspace"), workspace.Name, true)) return;
		try
		{
			await WorkspaceService.DeleteWorkspaceAsync(workspace.Id);
			Snackbar.Add(t.T("workspaceList", "workspaceDeleted", workspace.Name), Severity.Success);
			await Initialize();
		}
		catch
		{
			Snackbar.Add(t.T("workspaceList", "failedToDeleteWorkspace", workspace.Name), Severity.Error);
		}
	}

	private async Task OnRowClick(TableRowClickEventArgs<WorkspaceListItem> rowClick)
	{
		await SelectWorkspace(rowClick.Item);
	}

	private async Task CreateWorkspace()
	{
		var newWorkspaceId = await DialogService.ShowCreateWorkspaceDialog();
		if (newWorkspaceId > 0)
		{
			WorkspaceService.GetCurrentUserWorkspacesAsync().AndForget();
			await OnWorkspaceSelected.InvokeAsync(newWorkspaceId);
		}
	}

	private async Task CloneWorkspace(WorkspaceListItem workspace)
	{
		var parameters = new DialogParameters { ["WorkspaceToClone"] = workspace };
		var name = t.T("workspaceList", "cloneWorkspaceTitle", workspace.Name);
		var result = await DialogService.Show<CloneWorkspaceDialog>(name, parameters).Result;
		if (result.Canceled) return;
		var clonedWorkspaceId = (long)result.Data;
		if (clonedWorkspaceId > 0)
		{
			WorkspaceService.GetCurrentUserWorkspacesAsync().AndForget();
			await OnWorkspaceSelected.InvokeAsync(clonedWorkspaceId);
		}
	}

	private bool WorkspaceFilter(WorkspaceListItem workspace)
	{
		if (string.IsNullOrWhiteSpace(searchString))
			return true;
		if (workspace.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

}