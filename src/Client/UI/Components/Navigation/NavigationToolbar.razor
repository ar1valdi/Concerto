@inject IBreadcrumbsService BreadcrumbsService

<MudToolBar Style="overflow-x: auto; overflow-y: hidden; background-color: var(--mud-palette-appbar-background); color: var(--mud-palette-appbar-text); height: 28px;" Class="flex-grow-1 flex-shrink-1" DisableGutters="true" Dense="true">
	
	@if (_breadcrumbs.HasValue && _breadcrumbs.Value.BreadcrumbItems.Any())
	{
		@if (LayoutState.SmAndUp)
		{
			<MudBreadcrumbs Class="py-0 flex-grow-1 flex-shrink-1" Style="color: inherit; flex-wrap: nowrap;" Items="_breadcrumbs.Value.BreadcrumbItems" Separator=">">
				<ItemTemplate Context="item">
					<MudLink Color="Color.Inherit" Href="@item.Href" Class="d-inline-block">@item.Text</MudLink>
				</ItemTemplate>
				<SeparatorTemplate>
					<MudText Style="pointer-events: none;" Class="d-inline-block" Color="Color.Default">
						>
					</MudText>
				</SeparatorTemplate>
			</MudBreadcrumbs>
		}
		else
		{
			var lastItem = _breadcrumbs.Value.BreadcrumbItems.Last();
			<MudText Color="Color.Inherit" Href="@lastItem.Href" Class="text-ellipsis">@lastItem.Text</MudText>
		}
	}
</MudToolBar>

@code {
	[CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

	BreadcrumbsPackage? _breadcrumbs = null;

	protected override void OnInitialized()
	{
		BreadcrumbsService.BreadcrumbsChangeEventHandler += SetBreadcrumbs;
	}

	private void SetBreadcrumbs(object? sender, BreadcrumbsPackage breadcrumbsPackage)
	{
		_breadcrumbs = breadcrumbsPackage;
		StateHasChanged();
	}

	public void Dispose()
	{
		BreadcrumbsService.BreadcrumbsChangeEventHandler -= SetBreadcrumbs;
	}

}