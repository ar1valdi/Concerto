@using Microsoft.AspNetCore.SignalR.Client
@inject IStorageService StorageService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject HubConnection HubConnection

<MudTreeView T="TreeItemData" @key="@_treeKey"
    Items="@_rootNodes"
    ServerData="@LoadChildrenAsync"
    MultiSelection="false"
    Hover="true"
    Dense="true"
    ExpandOnClick="true">
    <ItemTemplate>
        <MudTreeViewItem T="TreeItemData"
            Value="@context"
            Text="@context.Name"
            @bind-Expanded="@context.Expanded"
            CanExpand="@context.Expandable"
            Icon="@(context.IsFolder ? Icons.Material.Filled.Folder : Icons.Material.Filled.FilePresent)"
            OnClick="@(() => OnItemClick(context))"
            LoadingIconColor="Color.Info"/>
    </ItemTemplate>
</MudTreeView>

@code {
    private HashSet<TreeItemData> _rootNodes = new();
    private int _treeKey;

    protected override async Task OnInitializedAsync()
    {
        StorageService.OnUploadedToFolderEventHandler += (_, id) => _ = RefreshTree();
        HubConnection.On<long?>("TreeUpdated", async _ => await RefreshTree());

        if (HubConnection.State == HubConnectionState.Disconnected)
            await HubConnection.StartAsync();

        await RefreshTree();
    }

    private async Task<HashSet<TreeItemData>> LoadChildrenAsync(TreeItemData node)
	{
		var nodes = await LoadNodesAsync(node.Id);
		await InvokeAsync(StateHasChanged); // ensure UI update is queued
		return nodes;
	}

    private async Task<HashSet<TreeItemData>> LoadNodesAsync(long folderId)
    {
        var content = await StorageService.GetFolderContentAsync(folderId);
        return content.SubFolders
            .Select(folder => new TreeItemData { Expandable = folder.HasChildren, Item = folder })
            .Concat(content.Files.Select(file => new TreeItemData { Expandable = false, Item = file }))
            .ToHashSet();
    }

    private async Task RefreshTree()
    {
        _rootNodes = await LoadNodesAsync(-1);
        _treeKey++;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnItemClick(TreeItemData node)
    {
        if (node.IsFolder)
            Navigation.NavigateTo($"storage/{node.Id}");
        else if (node.Item is FileItem file)
            await DialogService.ShowFilePreviewDialog(file);
    }

    private class TreeItemData
    {
        public FolderContentItem? Item { get; set; }
        public bool Expanded { get; set; }
        public bool Expandable { get; set; }
        public long Id => Item?.Id ?? 0;
        public string Name => Item?.Name ?? "";
        public bool IsFolder => Item is FolderItem;
    }
}
