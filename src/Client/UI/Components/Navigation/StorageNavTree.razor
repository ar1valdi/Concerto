@using Microsoft.AspNetCore.SignalR.Client
@inject IStorageService StorageService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject HubConnection HubConnection

<div class="storage-tree">
    @foreach (var node in _rootNodes)
    {
        <TreeNode Node="@node"
                  Depth="0"
                  OnItemClick="@OnItemClick"
                  OnToggleExpand="@OnToggleExpand"
                  LoadChildren="@LoadChildrenAsync" />
    }
</div>

@code {
    private HashSet<TreeItemData> _rootNodes = new();
    private HashSet<long> _expandedNodeIds = new();

    protected override async Task OnInitializedAsync()
    {
        StorageService.OnUploadedToFolderEventHandler += (_, id) => _ = RefreshTree();
        HubConnection.On<long?>("TreeUpdated", async _ => await RefreshTree());

        if (HubConnection.State == HubConnectionState.Disconnected)
            await HubConnection.StartAsync();

        await RefreshTree();
    }

    private async Task<HashSet<TreeItemData>> LoadChildrenAsync(TreeItemData node)
    {
        var nodes = await LoadNodesAsync(node.Id);
        node.Children = nodes;
        await InvokeAsync(StateHasChanged);
        return nodes;
    }

    private async Task<HashSet<TreeItemData>> LoadNodesAsync(long folderId)
    {
        var content = await StorageService.GetFolderContentAsync(folderId);
        var nodes = content.SubFolders
            .Select(folder => new TreeItemData { Expandable = folder.HasChildren, Item = folder })
            .Concat(content.Files.Select(file => new TreeItemData { Expandable = false, Item = file }))
            .ToHashSet();

        foreach (var node in nodes.Where(n => n.IsFolder && _expandedNodeIds.Contains(n.Id)))
        {
            node.Expanded = true;
            node.Children = await LoadNodesAsync(node.Id);
        }

        return nodes;
    }

    private async Task RefreshTree()
    {
        _rootNodes = await LoadNodesAsync(-1);
        await InvokeAsync(StateHasChanged);
    }

    private Task OnToggleExpand(TreeItemData node, bool expanded)
    {
        if (expanded)
            _expandedNodeIds.Add(node.Id);
        else
            _expandedNodeIds.Remove(node.Id);

        return Task.CompletedTask;
    }

    private async Task OnItemClick(TreeItemData node)
    {
        if (node.IsFolder)
            Navigation.NavigateTo($"storage/{node.Id}");
        else if (node.Item is FileItem file)
            await DialogService.ShowFilePreviewDialog(file);
    }
}
