@inject ITranslationsService t

<MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Baseline">
    <MudSelect Variant="Variant.Outlined" Dense="true" Margin="Margin.Dense" T="FolderPermission" Value="Value" ValueChanged="ValueChanged" Label="@t.T("folderPermissionPicker", "permissionLabel")" AnchorOrigin="Origin.BottomCenter" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Security">
		@if (Inherited.HasValue)
		{
            <MudSelectItem Value="@(new FolderPermission(Inherited.Value, true))">@($"{t.T("folderPermissionPicker", "inheritedPrefix")} {ToText(Inherited.Value)}")</MudSelectItem>
		}
        <MudSelectItem Value="@(Values[FolderPermissionType.Read])">@ToText(FolderPermissionType.Read)</MudSelectItem>
        <MudSelectItem Value="@(Values[FolderPermissionType.ReadWriteOwned])">@ToText(FolderPermissionType.ReadWriteOwned)</MudSelectItem>
        <MudSelectItem Value="@(Values[FolderPermissionType.ReadWrite])">@ToText(FolderPermissionType.ReadWrite)</MudSelectItem>
	</MudSelect>
    <MudTooltip Text="" Arrow="true">
		<ChildContent>
            <MudIcon Icon="@Icons.Material.Filled.Info" Title="@t.T("folderPermissionPicker", "infoTitle")"/>
		</ChildContent>
		<TooltipContent>
			<MudText Align="Align.Left">
                <h2>@t.T("folderPermissionPicker", "tooltipTitle")</h2>
				<br/>
                <h3>@t.T("folderPermissionPicker", "readersHeader")</h3>
				<ul>
                    <li>• @t.T("folderPermissionPicker", "readersPoint1")</li>
				</ul>
				<br/>
                <h3>@t.T("folderPermissionPicker", "contributorsHeader")</h3>
				<ul>
                    <li>• @t.T("folderPermissionPicker", "contributorsPoint1")</li>
                    <li>• @t.T("folderPermissionPicker", "contributorsPoint2")</li>
                    <li>• @t.T("folderPermissionPicker", "contributorsPoint3")</li>
                    <li>• @t.T("folderPermissionPicker", "contributorsPoint4")</li>
				</ul>
				<br/>
                <h3>@t.T("folderPermissionPicker", "editorsHeader")</h3>
				<ul>
                    <li>• @t.T("folderPermissionPicker", "editorsPoint1")</li>
                    <li>• @t.T("folderPermissionPicker", "editorsPoint2")</li>
                    <li>• @t.T("folderPermissionPicker", "editorsPoint3")</li>
                    <li>• @t.T("folderPermissionPicker", "editorsPoint4")</li>
                    <li>• @t.T("folderPermissionPicker", "editorsPoint5")</li>
				</ul>
			</MudText>
		</TooltipContent>
	</MudTooltip>
</MudStack>

@code {

	[Parameter]
	public FolderPermission Value { get; set; } = null!;

	[Parameter]
	public EventCallback<FolderPermission> ValueChanged { get; set; }

	[Parameter]
	public EventCallback<FolderPermission> OnChange { get; set; }

	[Parameter]
	public FolderPermissionType? Inherited { get; set; }

	private static Dictionary<FolderPermissionType, FolderPermission> Values = new()
	{
		[FolderPermissionType.Read] = new FolderPermission(FolderPermissionType.Read, false),
		[FolderPermissionType.ReadWriteOwned] = new FolderPermission(FolderPermissionType.ReadWriteOwned, false),
		[FolderPermissionType.ReadWrite] = new FolderPermission(FolderPermissionType.ReadWrite, false)
	};

    private string ToText(FolderPermissionType type)
	{
		return type switch
		{
            FolderPermissionType.Read => t.T("folderPermissionPicker", "reader"),
            FolderPermissionType.ReadWriteOwned => t.T("folderPermissionPicker", "contributor"),
            FolderPermissionType.ReadWrite => t.T("folderPermissionPicker", "editor"),
			_ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
			};
	}

}