@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inherits MudPaper;
@implements IDisposable

@inject IDialogService DialogService
@inject IStorageService StorageService
@inject ISnackbar Snackbar;

<MudPaper Class="@Class" Style="@($"display: flex; flex-direction: column; {Style}")" Elevation="@Elevation" Outlined="@Outlined">
	@if (FolderContent is not null)
	{
		<MudPaper Height="45px" Outlined="false" Elevation="0" 
				  Class="pl-1 py-0 mud-breadcrumbs align-content-stretch" Style="flex: 1 0 auto; overflow-x: auto; overflow-y: hidden; background-color: var(--mud-palette-surface);">

			<MudIconButton Title="Back" Variant="Variant.Filled" Color="Color.Default" Icon="@Icons.Material.Filled.ArrowBack"
					   Disabled="@(BreadCrumbs.Count <= 1)" OnClick="Back" DisableElevation="true" Size="Size.Small" />

			@if (LayoutState.SmAndUp)
			foreach (var breadcrumb in BreadCrumbs)
			{
				var isCurrent = FolderContent.Self.Equals(breadcrumb);

				@if (!isCurrent)
				{
						<MudButton Class="d-inline-block " Style="text-transform: none; min-width:auto;" Variant="Variant.Text" Color="Color.Default"
								   OnClick="async () => await BreadcrumbBack(breadcrumb)">
							@breadcrumb.Name
						</MudButton>
						<p style="display: inline-block; user-select: none;" class="mx-2">></p>
				}
				else
				{
						<MudButton Class="d-inline-block " Style="text-transform: none; min-width:auto;" Variant="Variant.Text" Color="Color.Primary">
							@breadcrumb.Name
						</MudButton>
				}
			}
			else
			{
				<MudButton StartIcon="@Icons.Material.Sharp.Folder" Style="text-transform: none; pointer-events: none; text-align: center;">
					@BreadCrumbs.LastOrDefault()?.Name
				</MudButton>
			}
		</MudPaper>
		
		<MudTable @ref="_table" T="FolderContentItem" Comparer="_comparer" Items="FolderContentItems" MultiSelection="false"
			  Loading="_loading" Filter="new Func<FolderContentItem, bool>(FolderContentItemFilter)" SortLabel="Sort By"
				  Class="" Style="flex: 1 1 100%; display: flex; flex-direction: column;" Outlined="false" Height="@($"auto; flex: 1 0 0;")" Hover="true" Elevation="0" FixedHeader="true" FixedFooter="true"
			  OnRowClick="OnRowClick" RowStyle="cursor: pointer;" RowClassFunc="RowClassFunc" AllowUnsorted="false" Dense="true">
			<ToolBarContent>

				@if (LayoutState.SmAndUp)
				{
					<MudIcon Class="mr-2 color-folder-yellow" Icon="@Icons.Material.Sharp.Folder" Size="Size.Large" />
					<MudText Typo="Typo.h5">@FolderContent.Self.Name</MudText>
					<MudSpacer />
				}

				<div class="ml-2">
					<MudTextField @bind-Value="_searchString" Immediate="true" Clearable="true"
							  Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search"
							  IconSize="Size.Small" Margin="Margin.Dense" Class="mt-0 mr-2" />
				</div>
				<MudSpacer />

				<MudButtonGroup Class="ml-2" OverrideStyles="false">
					@if (LayoutState.MdAndUp)
					{
						<MudIconButton Title="Refresh" OnClick="Refresh"
							   DisableElevation="true" Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" Variant="Variant.Filled" />
						@if (!HideManagementButtons)
						{
							<MudIconButton Title="Upload files" OnClick="async () => await UploadFiles()" Disabled="@(!FolderContent.Self.CanWrite)"
							   DisableElevation="true" Icon="@Icons.Material.Filled.UploadFile" Color="Color.Default" Variant="Variant.Filled" />
							<MudIconButton Title="Create folder" OnClick="async () => await ShowCreateFolderDialog()" Disabled="@(!FolderContent.Self.CanWrite)"
							   DisableElevation="true" Icon="@Icons.Material.Filled.CreateNewFolder" Color="Color.Default" Variant="Variant.Filled" />
							<MudIconButton Title="Toggle selection mode" OnClick="() => SelectionMode = !SelectionMode"
							   DisableElevation="true" Size="Size.Small" Color="Color.Default" Variant="Variant.Filled" Icon="@(SelectionMode ? Icons.Material.Filled.Deselect : Icons.Material.Filled.SelectAll)" />
						}
					}

					<MudMenu Dense="true">
						<ActivatorContent>
							<MudIconButton Title="More" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
						</ActivatorContent>
						<ChildContent>

							<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Refresh"
									  OnClick="Refresh" OnTouch="Refresh">
								Refresh view
							</MudMenuItemW>

							@if (!HideManagementButtons)
							{
								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.UploadFile"
									  OnClick="async () => await UploadFiles()" OnTouch="async () => await UploadFiles()"
									  Disabled="@(!FolderContent.Self.CanWrite)">
									Upload files
								</MudMenuItemW>

								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.CreateNewFolder"
									  OnClick="async () => await ShowCreateFolderDialog()" OnTouch="async () => await ShowCreateFolderDialog()"
									  Disabled="@(!FolderContent.Self.CanWrite)">
									Create folder
								</MudMenuItemW>

								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Settings"
									  OnClick="async () => await ShowUpdateFolderDialog(FolderContent.Self)" OnTouch="async () => await ShowUpdateFolderDialog(FolderContent.Self)"
									  Disabled="@(!FolderContent.Self.CanEdit)">
									Settings
								</MudMenuItemW>

								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@(SelectionMode ? Icons.Material.Filled.Deselect : Icons.Material.Filled.SelectAll)"
									  OnClick="() => SelectionMode = !SelectionMode" OnTouch="() => SelectionMode = !SelectionMode">
									@(!SelectionMode ? "Select" : "Cancel selection")
								</MudMenuItemW>

								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.DriveFileMove"
									  OnClick="async () => await MoveSelected()" OnTouch="async () => await MoveSelected()"
									  Disabled="@(!CanMoveSelected)">
									Move selected to
								</MudMenuItemW>

								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.ContentCopy"
									  OnClick="async () => await CopySelected()" OnTouch="async () => await CopySelected()"
									  Disabled="@(!CanCopySelected)">
									Copy selected to
								</MudMenuItemW>

								<MudMenuItemW IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.DeleteSweep"
									  OnClick="async () => await DeleteSelected()" OnTouch="async () => await DeleteSelected()"
									  Disabled="@(!CanDeleteSelected)">
									Delete selected
								</MudMenuItemW>
							}
						</ChildContent>
					</MudMenu>
				</MudButtonGroup>

			</ToolBarContent>

			<ColGroup>
				@if (SelectionMode)
				{
					<col style="width: 10px" />
				}
				<col />
				<col />
				<col />
				<col />
			</ColGroup>

			<HeaderContent>

				@if (SelectionMode && !LayoutState.Xs)
				{
					<MudTh>
						@if(!SelectFilesMode)
						{
							<MudCheckBox T="bool?" Dense="true" CheckedChanged="SelectAllClicked" Checked="_selectAllState" />
						}
					</MudTh>
				}

				<MudTh>
					<MudTableSortLabel @ref="_nameLabel" InitialDirection="SortDirection.Ascending"
								   SortBy="new Func<FolderContentItem, object>(x => FolderPrecedence(_nameLabel?.SortDirection, x) + x.Name)">
						Name
					</MudTableSortLabel>


				</MudTh>
				<MudTh>
					<MudTableSortLabel @ref="_formatLabel"
								   SortBy="new Func<FolderContentItem, object>(x => FolderPrecedence(_formatLabel?.SortDirection, x) + ((x as FileItem)?.Extension ?? DirFormat + x.Name ))">
						Format
					</MudTableSortLabel>
				</MudTh>
				<MudTh>
					<MudTableSortLabel @ref="_typeLabel"
								   SortBy="new Func<FolderContentItem, object>(x => FolderPrecedence(_typeLabel?.SortDirection, x) + x.ToDisplayString() + x.Name)">
						Type
					</MudTableSortLabel>
				</MudTh>
				<MudTh>
						Size
				</MudTh>
				<MudTh>
						Owner
				</MudTh>
				<MudTh></MudTh>
			</HeaderContent>

			<RowTemplate>

				@if (SelectionMode)
				{
					<MudTd DataLabel="Selected">
						@if (!SelectFilesMode || context is FileItem)
						{
							<MudCheckBox Class="py-2" T="bool" CheckedChanged="async () => await ToggleSelectedItem(context)" Dense="true" Checked="@SelectedItems.Contains(context)" />
						}
					</MudTd>
				}


				@if (context is FolderItem folder)
				{
					<MudTd DataLabel="Name" Style="">
						<MudStack Row="true">
							<MudIcon Size="Size.Medium" Class="color-folder-yellow" Icon="@Icons.Material.Sharp.Folder" />
							<MudText Typo="Typo.body2">@context.Name</MudText>
						</MudStack>
					</MudTd>
					<MudTd DataLabel="Format">@DirFormat</MudTd>
					<MudTd DataLabel="Type">
						<MudStack Row="true">
							<MudIcon Size="Size.Medium" Icon="@folder.Type.ToIcon()" />
							<MudText Typo="Typo.body2">@folder.Type.ToDisplayString()</MudText>
						</MudStack>
					</MudTd>
					<MudTd DataLabel="Size"></MudTd>
					<MudTd DataLabel="Owner">
						<MudText Typo="Typo.body2">@folder.OwnerFullName</MudText>
					</MudTd>
					<MudTd Style="text-align: right">
						<MudMenu Dense="true">
							<ActivatorContent>
								@if (LayoutState.Xs)
								{
									<MudButton DisableElevation="true" StartIcon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled">Actions</MudButton>
								}
								else
								{
									<MudIconButton Title="Actions" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
								}
							</ActivatorContent>
							<ChildContent>
								@if (SelectionMode && !HideManagementButtons)
								{
									<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.DriveFileMove"
									  OnClick="async () => await MoveSelected()" OnTouch="async () => await MoveSelected()"
									  Disabled="@(!CanMoveSelected)">
										Move selected to
									</MudMenuItemW>

									<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.ContentCopy"
									  OnClick="async () => await CopySelected()" OnTouch="async () => await CopySelected()"
									  Disabled="@(!CanCopySelected)">
										Copy selected to
									</MudMenuItemW>

									<MudMenuItemW IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.DeleteSweep"
									  OnClick="async () => await DeleteSelected()" OnTouch="async () => await DeleteSelected()"
									  Disabled="@(!CanDeleteSelected)">
										Delete selected
									</MudMenuItemW>
								}
								else
								{
									<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.FolderOpen"
									  OnClick="() => OpenFolder(folder)" OnTouch="() => OpenFolder(folder)">
										Open
									</MudMenuItemW>
									@if (!HideManagementButtons)
									{
										<MudMenuItemW hidden="@ChooseFolderMode" IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Settings"
									  OnClick="() => ShowUpdateFolderDialog(folder)" OnTouch="() => ShowUpdateFolderDialog(folder)"
									  Disabled=@(!folder.CanEdit)>
											Settings
										</MudMenuItemW>
										<MudMenuItemW hidden="@ChooseFolderMode" IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete"
									  OnClick="async () => await DeleteFolder(folder)" OnTouch="async () => await DeleteFolder(folder)"
									  Disabled=@(!folder.CanDelete)>
											Delete
										</MudMenuItemW>
									}
								}

							</ChildContent>
						</MudMenu>
					</MudTd>
				}
				else if (context is FileItem file)
				{
					<MudTd DataLabel="Name" Style="">
						<MudStack Row="true">
							<MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.InsertDriveFile" />
							<MudText Typo="Typo.body2">@context.Name</MudText>
						</MudStack>
					</MudTd>
					<MudTd DataLabel="Format">
						<MudStack Row="true">
							<MudText Typo="Typo.body2">@file.Extension</MudText>
						</MudStack>
					</MudTd>
					<MudTd DataLabel="Type">
						<MudStack Row="true">
							<MudStack Row="true">
								<MudIcon Size="Size.Medium" Icon="@file.ToIcon()" />
								<MudText Typo="Typo.body2">@file.ToDisplayString()</MudText>
							</MudStack>
						</MudStack>
					</MudTd>
					<MudTd DataLabel="Size">
						<MudText Typo="Typo.body2">@file.Size.ToFileSizeString()</MudText>
					</MudTd>
					<MudTd DataLabel="Owner">
						<MudText Typo="Typo.body2">@file.OwnerFullName</MudText>
					</MudTd>
					<MudTd Style="text-align: right">
						@if (!HideManagementButtons)
						{
							<MudMenu Dense="true" hidden="@ChooseFolderMode">
								<ActivatorContent>
									@if (LayoutState.Xs)
									{
										<MudButton DisableElevation="true" StartIcon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled">Actions</MudButton>
									}
									else
									{
										<MudIconButton Title="Actions" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
									}
								</ActivatorContent>
								<ChildContent>
									@if (SelectionMode)
									{
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.DriveFileMove"
									  OnClick="async () => await MoveSelected()" OnTouch="async () => await MoveSelected()"
									  Disabled="@(!CanMoveSelected)">
											Move selected to
										</MudMenuItemW>

										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.ContentCopy"
									  OnClick="async () => await CopySelected()" OnTouch="async () => await CopySelected()"
									  Disabled="@(!CanCopySelected)">
											Copy selected to
										</MudMenuItemW>

										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.DeleteSweep"
									  OnClick="async () => await DeleteSelected()" OnTouch="async () => await DeleteSelected()"
									  Disabled="@(!CanDeleteSelected)">
											Delete selected
										</MudMenuItemW>
									}
									else
									{
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Download"
											OnClick="() => DownloadFile(file)" OnTouch="() => DownloadFile(file)">
											Download
										</MudMenuItemW>
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Forum"
									  OnClick="async () => await DialogService.ShowPostsRelatedToFileDialog(FolderContent.WorkspaceId, file)" OnTouch="async () => await DialogService.ShowPostsRelatedToFileDialog(FolderContent.WorkspaceId, file)">
											Show related posts
										</MudMenuItemW>
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Edit"
									  OnClick="() => ShowUpdateFileDialog(file)" OnTouch="() => ShowUpdateFileDialog(file)"
									  Disabled=@(!file.CanEdit)>
											Edit
										</MudMenuItemW>
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete"
									  OnClick="() => DeleteFile(file)" OnTouch="() => DeleteFile(file)"
									  Disabled=@(!file.CanDelete)>
											Delete
										</MudMenuItemW>
									}
								</ChildContent>
							</MudMenu>
						}
					</MudTd>
				}
			</RowTemplate>
		</MudTable>
	}
</MudPaper>



@code {
	[CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

	private long? _initialFolderId = null;
	[Parameter]
	public long? InitialFolderId { get; set; } = null;

	[Parameter]
	public bool ChooseFolderMode { get; set; } = false;
	[Parameter]
	public bool SelectFilesMode { get; set; } = false;
	[Parameter]
	public HashSet<FolderContentItem> SelectedItems { get; set; } = new(new FolderContentItemIdEqualityComparer());
	[Parameter]
	public EventCallback<HashSet<FolderContentItem>> OnSelectedItemsChanged { get; set; }
	[Parameter]
	public EventCallback<FolderSelectedEventArgs> OnFolderLoaded { get; set; }



	private CancellationTokenSource? _lastRefreshCancellation;

	private string _height = string.Empty;

	private string TableContentHeightDiff => LayoutState.Xs ? "128px" : "64px";

	private MudTable<FolderContentItem>? _table;

	private FolderContent? FolderContent { get; set; }
	private HashSet<FolderContentItem> FolderContentItems { get; set; } = new(new FolderContentItemIdEqualityComparer());
	private FolderContentItemIdEqualityComparer _comparer = new();

	private bool CanMoveSelected => SelectionMode && SelectedItems.Any() && SelectedItems.All(i => i.CanDelete);
	private bool CanCopySelected => SelectionMode && SelectedItems.Any();
	private bool CanDeleteSelected => SelectionMode && SelectedItems.Any() && SelectedItems.All(i => i.CanDelete);

	private bool? _selectAllState => SelectedItems.Count == FolderContentItems.Count ? true : SelectedItems.Count > 0 ? null : false;

	private bool _selectionMode = false;

	private bool HideManagementButtons => ChooseFolderMode || SelectFilesMode;

	private bool SelectionMode
	{
		get => _selectionMode;
		set
		{
			_selectionMode = value;
			SelectedItems.Clear();
			StateHasChanged();
		}
	}

	MudTableSortLabel<FolderContentItem>? _nameLabel;
	MudTableSortLabel<FolderContentItem>? _formatLabel;
	MudTableSortLabel<FolderContentItem>? _typeLabel;


	private string DirFormat => "folder";
	private string FolderPrecedence(SortDirection? dir, FolderContentItem item)
	{
		return item switch
		{
			FolderItem folder when dir is SortDirection.Ascending or SortDirection.None => "A",
			FolderItem folder when dir is SortDirection.Descending => "Z",

			FileItem file when dir is SortDirection.Ascending or SortDirection.None => "Z",
			FileItem file when dir is SortDirection.Descending => "A",
			_ => ""
		};
	}

	private List<FolderItem> BreadCrumbs { get; } = new();

	private class FolderBreadcrumbItem : BreadcrumbItem
	{
		public FolderItem FolderItem { get; set; }

		public FolderBreadcrumbItem(FolderItem folderItem, bool disabled = false) : base(folderItem.Name, string.Empty, disabled)
		{
			FolderItem = folderItem;
		}
	}

	private bool _loading = true;
	private string? _searchString;


	private long? CurrentFolderId => FolderContent?.Self.Id;

	protected override void OnInitialized()
	{
		StorageService.OnUploadedToFolderEventHandler += OnUploadFinished;
	}

	public void Dispose()
	{
		StorageService.OnUploadedToFolderEventHandler -= OnUploadFinished;
	}

	protected override void OnAfterRender(bool firstRender)
	{

	}

	protected override async Task OnParametersSetAsync()
	{
		if(InitialFolderId is not null && _initialFolderId != InitialFolderId)
		{
			_initialFolderId = InitialFolderId;

			_selectionMode = SelectFilesMode;

			try
			{
				await LoadFolderContent(InitialFolderId.Value);
				BreadCrumbs.Clear();
				BreadCrumbs.Add(FolderContent!.Self);
			}
			catch(OperationCanceledException) {}
		}
	}

	private async Task Refresh()
	{
		if (CurrentFolderId != null)
		{
			await LoadFolderContent(CurrentFolderId.Value);
			if (SelectionMode)
			{
				SelectedItems.IntersectWith(FolderContentItems);
			}
		}
		StateHasChanged();
	}

	public async Task OpenFolder(FolderItem folder)
	{
		await LoadFolderContent(folder.Id);
		BreadCrumbs.Add(FolderContent!.Self);
		if(!SelectFilesMode) SelectedItems.Clear();
	}

	private async Task LoadFolderContent(long folderId)
	{
		_loading = true;
		_lastRefreshCancellation?.Cancel();
		_lastRefreshCancellation = new();
		var folderContent = await StorageService.GetFolderContentAsync(folderId, _lastRefreshCancellation.Token);
		_lastRefreshCancellation.Token.ThrowIfCancellationRequested();

		FolderContent = folderContent;

		await Task.Run(() =>{
			var files = FolderContent.Files.Cast<FolderContentItem>();
			var subFolders = FolderContent.SubFolders.Cast<FolderContentItem>();
			FolderContentItems = files.Concat(subFolders).ToHashSet(new FolderContentItemIdEqualityComparer());
		});

		await OnFolderLoaded.InvokeAsync(new FolderSelectedEventArgs(FolderContent.Self, BreadCrumbs));
		_loading = false;
	}

	private bool FolderContentItemFilter(FolderContentItem item)
	{
		if (string.IsNullOrWhiteSpace(_searchString))
			return true;
		if (item.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	}

	public async Task UploadFiles()
	{
		var parameters = new DialogParameters { ["FolderId"] = FolderContent!.Self.Id };
		var result = await DialogService.Show<UploadFilesDialog>("Upload files to folder", parameters).Result;
		await Refresh();
	}

	public async Task DeleteSelected()
	{
		var request = new DeleteFolderItemsRequest
			{
				FileIds = SelectedItems!.Where(x => x is FileItem).Select(x => x.Id),
				FolderIds = SelectedItems!.Where(x => x is FolderItem).Select(x => x.Id)
			};
		try
		{
			var itemsNames = string.Join(",\n\n", SelectedItems.Select(x => x.Name));
			if (!await DialogService.ShowDeleteManyConfirmationDialog("Delete folder items", "folder items", itemsNames)) return;
			await StorageService.DeleteFolderItemsAsync(request);
			SelectionMode = false;
			Snackbar.Add("Items deleted", Severity.Success);
			await Refresh();
		}
		catch
		{
			Snackbar.Add("Failed to delete items", Severity.Error);
			await Refresh();
		}
	}

	public async Task MoveSelected()
	{
		if (FolderContent is null) return;
		var folderIds = SelectedItems.Where(item => item is FolderItem).Select(folder => folder.Id).ToArray();
		var fileIds = SelectedItems.Where(item => item is FileItem).Select(file => file.Id).ToArray();

		var excluded = new long[] { FolderContent.Self.Id };
		var excludedWithChildren = folderIds;

		var destinationFolder = await DialogService.ShowSelectFolderDialog("Move items to", "Move here", FolderContent.WorkspaceId, excluded, excludedWithChildren);
		if (destinationFolder is null) return;

		var moveRequest = new MoveFolderItemsRequest
			{
				FolderIds = folderIds,
				FileIds = fileIds,
				DestinationFolderId = destinationFolder.Id
			};

		await StorageService.MoveFolderItemsAsync(moveRequest);

		SelectionMode = false;
		await Refresh();
	}

	public async Task CopySelected()
	{
		if (FolderContent is null) return;
		var folderIds = SelectedItems.Where(item => item is FolderItem).Select(folder => folder.Id).ToArray();
		var fileIds = SelectedItems.Where(item => item is FileItem).Select(file => file.Id).ToArray();

		var excluded = new long[] { FolderContent.Self.Id };
		var excludedWithChildren = folderIds;

		var destinationFolder = await DialogService.ShowSelectFolderDialog("Copy items to", "Copy here", FolderContent.WorkspaceId, excluded, excludedWithChildren);
		if (destinationFolder is null) return;

		var copyRequest = new CopyFolderItemsRequest
			{
				FolderIds = folderIds,
				FileIds = fileIds,
				DestinationFolderId = destinationFolder.Id
			};

		await StorageService.CopyFolderItemsAsync(copyRequest);

		SelectionMode = false;
		await Refresh();
	}



	public async Task DeleteFolder(FolderItem folder)
	{
		try
		{
			if (!await DialogService.ShowConfirmationDialog("Delete folder", "delete", "Folder", folder.Name)) return;
			await StorageService.DeleteFolderAsync(folder.Id);
			Snackbar.Add("Folder deleted", Severity.Success);
		}
		catch
		{
			Snackbar.Add($"Failed to delete folder {folder.Name}", Severity.Success);
		}
		await Refresh();

	}

	public async Task DeleteFile(FileItem file)
	{
		try
		{
			if (!await DialogService.ShowConfirmationDialog("Delete file", "delete", "file", file.Name)) return;
			await StorageService.DeleteFileAsync(file.Id);
			Snackbar.Add("File deleted", Severity.Success);
		}
		catch
		{
			Snackbar.Add($"Failed to delete file {file.FullName}", Severity.Success);
		}
		await Refresh();
	}

	public async Task ShowCreateFolderDialog()
	{
		var parameters = new DialogParameters
			{
				["ParentFolderId"] = FolderContent!.Self.Id,
				["ParentFolderPermission"] = FolderContent.WorkspacePermission.Type
			};
		var name = "Create folder";
		var result = await DialogService.Show<CreateFolderDialog>(name, parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			await Refresh();
		}
	}

	public async Task ShowUpdateFolderDialog(FolderItem editedFolder)
	{
		var parameters = new DialogParameters { ["EditedFolderId"] = editedFolder.Id };
		var name = "Edit folder";
		var result = await DialogService.Show<UpdateFolderDialog>(name, parameters).Result;
		if ((bool)(result.Data ?? false))
		{
			await Refresh();
		}
	}

	public async Task ShowUpdateFileDialog(FileItem file)
	{
		var parameters = new DialogParameters { ["EditedFileId"] = file.Id };
		var name = "Edit file";
		var result = await DialogService.Show<UpdateFileDialog>(name, parameters).Result;
		if (result.Canceled) return;
		await Refresh();
	}

	public async Task DownloadFile(FileItem file)
	{
		await StorageService.DownloadFile(file.Id, file.FullName);
	}


	private async Task OnRowClick(TableRowClickEventArgs<FolderContentItem> tableClick)
	{
		var item = tableClick.Item;

		if (SelectFilesMode)
		{
			if (item is FileItem file)
				await ToggleSelectedItem(file);
			else if (item is FolderItem folder)
				await OpenFolder(folder);
		}
		else if (SelectionMode)
		{
			await ToggleSelectedItem(item);
			return;
		}
		else
		{
			if (item is FolderItem folder)
				await OpenFolder(folder);
			else if (item is FileItem file)
			{
				await DialogService.ShowFilePreviewDialog(file);
				//await DownloadFile(file);
			}

		}
	}

	private async Task ToggleSelectedItem(FolderContentItem item)
	{
		if (SelectedItems.Contains(item)) SelectedItems.Remove(item);
		else SelectedItems.Add(item);
		await OnSelectedItemsChanged.InvokeAsync(SelectedItems);
		StateHasChanged();
	}

	private async Task SelectAllClicked()
	{
		switch (_selectAllState)
		{
			case true:
			case null:
				SelectedItems.ExceptWith(FolderContentItems);
				break;
			case false:
				if (SelectFilesMode)
					SelectedItems.UnionWith(FolderContentItems.Where(x => x is FileItem).Where(x => FolderContentItemFilter(x)).ToHashSet(new FolderContentItemIdEqualityComparer()));
				else
					SelectedItems.UnionWith(FolderContentItems.Where(x => FolderContentItemFilter(x)).ToHashSet(new FolderContentItemIdEqualityComparer()));
				break;
		}
		await OnSelectedItemsChanged.InvokeAsync(SelectedItems);
		StateHasChanged();
	}

	public string RowStyleFunc(FolderContentItem item, int rowNumber)
	{
		return "cursor: pointer;";
	}

	public string RowClassFunc(FolderContentItem item, int rowNumber)
	{
		if (SelectedItems.Contains(item)) return "row-colored row-modified";
		return string.Empty;
	}

	public async Task BreadcrumbBack(FolderItem item)
	{
		var itemIndex = BreadCrumbs.IndexOf(item);
		var itemsLeft = BreadCrumbs.Count - itemIndex;
		BreadCrumbs.RemoveRange(itemIndex, itemsLeft);
		await OpenFolder(item);
	}

	public async Task Back()
	{
		if (BreadCrumbs.Count > 1)
		{
			await BreadcrumbBack(BreadCrumbs[^2]);
		}
	}

	public void OnUploadFinished(object? sender, long folderId)
	{
		if (folderId == FolderContent!.Self.Id)
		{
			Refresh().AndForget();
		}
	}

	public record struct FolderSelectedEventArgs
	(
		FolderItem Folder,
		IReadOnlyCollection<FolderItem> Breadcrumbs
	);

}