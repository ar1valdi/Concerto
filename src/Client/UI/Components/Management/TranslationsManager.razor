@inherits ComponentBase

@using Concerto.Client.UI.Components.Dialogs

@inject ITranslationsService translationsService
@inject ILanguageManagementService languageManagementService
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (isLoading)
{
    <div class="loading-container">
        <div class="spinner"></div>
    </div>
}
else
{
    <div class="translations-manager">
        @RenderFilters()
        
        @if (isFiltering)
        {
            <div class="filtering-indicator"></div>
        }

        @RenderPaginationControls()
        
        <div class="translations-content">
            @RenderViewSections()
        </div>

        @if (!paginatedViewSections.Any())
        {
            <div class="no-matches">@translationsService.T("translationsManager", "noMatches")</div>
        }
    </div>

    @if (changedTranslations.Any())
    {
        <button class="save-button" @onclick="ShowSavePreview">
            <span class="save-icon">ðŸ’¾</span>
            @translationsService.T("translationsManager", "saveCta") (@changedTranslations.Count)
        </button>
    }
}


@code {
    private class EditableTranslation
    {
        public string Language { get; set; } = string.Empty;
        public string View { get; set; } = string.Empty;
        public string Key { get; set; } = string.Empty;
        public string Value { get; set; } = string.Empty;
        public string OriginalValue { get; set; } = string.Empty;
        public long Id { get; set; }
        
        public void UpdateValue(string newValue)
        {
            Value = newValue;
        }
        
        public bool HasChanged => Value != OriginalValue;
    }

    private class KeySection
    {
        public string Key { get; set; } = string.Empty;
        public List<EditableTranslation> Translations { get; set; } = [];
        public bool IsExpanded { get; set; } = false;
        
        public void ToggleExpanded()
        {
            IsExpanded = !IsExpanded;
        }
    }

    private class ViewSection
    {
        public string View { get; set; } = string.Empty;
        public List<KeySection> KeySections { get; set; } = [];
        public bool IsExpanded { get; set; } = false;
        
        public void ToggleExpanded()
        {
            IsExpanded = !IsExpanded;
        }
    }

    List<ViewSection> viewSections = [];
    List<ViewSection> filteredViewSections = [];
    List<ViewSection> paginatedViewSections = [];
    List<Language> languages = [];
    Dictionary<string, EditableTranslation> changedTranslations = [];
    
    bool isSaving = false;
    bool isLoading = true;
    bool isFiltering = false;
    
    private const int PageSize = 10;
    private int currentPage = 1;
    private int totalPages = 1;

    private string _filterView = string.Empty;
    private string filterView
    {
        get => _filterView;
        set
        {
            if (_filterView != value)
            {
                _filterView = value;
                ApplyFilters();
            }
        }
    }

    private string _filterKey = string.Empty;
    private string filterKey
    {
        get => _filterKey;
        set
        {
            if (_filterKey != value)
            {
                _filterKey = value;
                ApplyFilters();
            }
        }
    }

    private string _filterValueLanguage = string.Empty;
    private string filterValueLanguage
    {
        get => _filterValueLanguage;
        set
        {
            if (_filterValueLanguage != value)
            {
                _filterValueLanguage = value;
                ApplyFilters();
            }
        }
    }

    private string _filterValue = string.Empty;
    private string filterValue
    {
        get => _filterValue;
        set
        {
            if (_filterValue != value)
            {
                _filterValue = value;
                ApplyFilters();
            }
        }
    }

    private IEnumerable<string> _selectedLanguageKeys = [];
    private IEnumerable<string> selectedLanguageKeys
    {
        get => _selectedLanguageKeys;
        set
        {
            _selectedLanguageKeys = value;
            ApplyFilters();
        }
    }

    private bool _shouldRender = true;
    protected override bool ShouldRender() => _shouldRender;

    private RenderFragment RenderFilters() => __builder =>
    {
        <div class="filters-container">
            <h6 class="filters-header">@translationsService.T("translationsManager", "filtersHeader")</h6>
            <div class="filters-grid">
                <div class="filter-item">
                    <input type="text" 
                           @bind="filterView" 
                           @bind:event="oninput"
                           placeholder="@translationsService.T("translationsManager", "filterViewLabel")" 
                           class="filter-input" />
                </div>
                <div class="filter-item">
                    <input type="text" 
                           @bind="filterKey" 
                           @bind:event="oninput"
                           placeholder="@translationsService.T("translationsManager", "filterKeyLabel")" 
                           class="filter-input" />
                </div>
                <div class="filter-item">
                    <select @bind="filterValueLanguage" class="filter-select">
                        <option value="">@translationsService.T("translationsManager", "filterValueLanguageLabel")</option>
                        @foreach (var lang in languages)
                        {
                            <option value="@lang.Key">@lang.Name (@lang.Key.ToUpper())</option>
                        }
                    </select>
                </div>
                <div class="filter-item">
                    <input type="text" 
                           @bind="filterValue" 
                           @bind:event="oninput"
                           placeholder="@translationsService.T("translationsManager", "filterValueLabel")" 
                           class="filter-input"
                           disabled="@(string.IsNullOrEmpty(filterValueLanguage))" />
                </div>
                <div class="filter-item full-width">
                    <select @onchange="OnLanguageSelectionChanged" multiple class="filter-select">
                        @foreach (var lang in languages)
                        {
                            <option value="@lang.Key" selected="@selectedLanguageKeys.Contains(lang.Key)">@lang.Name (@lang.Key.ToUpper())</option>
                        }
                    </select>
                </div>
            </div>
        </div>
    };

    private RenderFragment RenderPaginationControls() => __builder =>
    {
        if (totalPages > 1)
        {
            <div class="pagination-controls">
                <button @onclick="GoToFirstPage" disabled="@(currentPage == 1)" class="page-btn">Â«</button>
                <button @onclick="GoToPreviousPage" disabled="@(currentPage == 1)" class="page-btn">â€¹</button>
                <span class="page-info">@currentPage / @totalPages</span>
                <button @onclick="GoToNextPage" disabled="@(currentPage == totalPages)" class="page-btn">â€º</button>
                <button @onclick="GoToLastPage" disabled="@(currentPage == totalPages)" class="page-btn">Â»</button>
            </div>
        }
    };

    private RenderFragment RenderViewSections() => __builder =>
    {
        @foreach (var viewSection in paginatedViewSections)
        {
            <div class="view-section">
                <div class="view-header" @onclick="() => ToggleViewSection(viewSection)">
                    <span class="expand-icon">@(viewSection.IsExpanded ? "â–¼" : "â–¶")</span>
                    <span class="view-name">@viewSection.View</span>
                </div>
                @if (viewSection.IsExpanded)
                {
                    <div class="view-content">
                        @foreach (var keySection in viewSection.KeySections)
                        {
                            <div class="key-section">
                                <div class="key-header" @onclick="() => ToggleKeySection(keySection)">
                                    <span class="expand-icon">@(keySection.IsExpanded ? "â–¼" : "â–¶")</span>
                                    <span class="key-name">@keySection.Key</span>
                                </div>
                                @if (keySection.IsExpanded)
                                {
                                    <div class="key-content">
                                        @foreach (var translation in keySection.Translations)
                                        {
                                            <div class="translation-field">
                                                <label class="translation-label">@translation.Language.ToUpper()</label>
                                                <input type="text" 
                                                       value="@translation.Value" 
                                                       @onchange="(e) => OnTranslationChanged(e.Value?.ToString() ?? string.Empty, translation)"
                                                       class="translation-input @(translation.HasChanged ? "changed" : "")" />
                                            </div>
                                        }
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
            </div>
        }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            languages = await languageManagementService.GetAllLanguagesAsync();
            var locations = await translationsService.FetchAllTranslationLocationsAsync();
            var translations = await translationsService.FetchFullTranslationsAsync();

            var translationDict = new Dictionary<string, Translation>();
            foreach (var t in translations)
            {
                translationDict[$"{t.Language}:{t.View}:{t.Key}"] = t;
            }

            viewSections = BuildViewSections(locations, translationDict);
            filteredViewSections = viewSections;
            selectedLanguageKeys = languages.Select(l => l.Key).ToList();
            
            ApplyPagination();
            isLoading = false;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{translationsService.T("translationsManager", "failedToLoadTranslations")}: {ex.Message}", Severity.Error);
            isLoading = false;
        }
    }

    private List<ViewSection> BuildViewSections(List<TranslationLocation> locations, Dictionary<string, Translation> translationDict)
    {
        var result = new List<ViewSection>();
        var viewGroups = locations.GroupBy(loc => loc.View);

        foreach (var viewGroup in viewGroups)
        {
            var viewSection = new ViewSection { View = viewGroup.Key };
            var keyGroups = viewGroup.GroupBy(loc => loc.Key);

            foreach (var keyGroup in keyGroups)
            {
                var keySection = new KeySection { Key = keyGroup.First().Key };
                
                foreach (var lang in languages)
                {
                    var lookupKey = $"{lang.Key}:{viewGroup.Key}:{keyGroup.First().Key}";
                    var existingTranslation = translationDict.GetValueOrDefault(lookupKey);
                    
                    keySection.Translations.Add(new EditableTranslation
                    {
                        Language = lang.Key,
                        View = viewGroup.Key,
                        Key = keyGroup.First().Key,
                        Value = existingTranslation?.Value ?? string.Empty,
                        OriginalValue = existingTranslation?.Value ?? string.Empty,
                        Id = existingTranslation?.Id ?? 0
                    });
                }
                
                viewSection.KeySections.Add(keySection);
            }
            
            result.Add(viewSection);
        }

        return result;
    }

    private void ApplyFilters()
    {
        isFiltering = true;
        StateHasChanged();

        try
        {
            var result = new List<ViewSection>();

            foreach (var viewSection in viewSections)
            {
                if (!string.IsNullOrWhiteSpace(filterView) && 
                    !viewSection.View.Contains(filterView, StringComparison.OrdinalIgnoreCase))
                {
                    continue;
                }

                var filteredKeySections = new List<KeySection>();
                
                foreach (var keySection in viewSection.KeySections)
                {
                    if (!string.IsNullOrWhiteSpace(filterKey) && 
                        !keySection.Key.Contains(filterKey, StringComparison.OrdinalIgnoreCase))
                    {
                        continue;
                    }

                    if (!string.IsNullOrWhiteSpace(filterValue) && !string.IsNullOrWhiteSpace(filterValueLanguage))
                    {
                        bool hasMatchingTranslation = false;
                        foreach (var translation in keySection.Translations)
                        {
                            if (translation.Language == filterValueLanguage && 
                                translation.Value.Contains(filterValue, StringComparison.OrdinalIgnoreCase))
                            {
                                hasMatchingTranslation = true;
                                break;
                            }
                        }
                        if (!hasMatchingTranslation) continue;
                    }

                    var filteredTranslations = new List<EditableTranslation>();
                    foreach (var translation in keySection.Translations)
                    {
                        if (selectedLanguageKeys.Contains(translation.Language))
                        {
                            filteredTranslations.Add(translation);
                        }
                    }

                    if (filteredTranslations.Any())
                    {
                        filteredKeySections.Add(new KeySection
                        {
                            Key = keySection.Key,
                            Translations = filteredTranslations
                        });
                    }
                }

                if (filteredKeySections.Any())
                {
                    result.Add(new ViewSection
                    {
                        View = viewSection.View,
                        KeySections = filteredKeySections
                    });
                }
            }

            filteredViewSections = result;
            currentPage = 1;
            ApplyPagination();
        }
        finally
        {
            isFiltering = false;
        }
    }

    private void ApplyPagination()
    {
        totalPages = Math.Max(1, (int)Math.Ceiling((double)filteredViewSections.Count / PageSize));
        currentPage = Math.Min(currentPage, totalPages);
        
        var startIndex = (currentPage - 1) * PageSize;
        var endIndex = Math.Min(startIndex + PageSize, filteredViewSections.Count);
        
        paginatedViewSections = filteredViewSections.Skip(startIndex).Take(PageSize).ToList();
    }

    private void GoToFirstPage()
    {
        currentPage = 1;
        ApplyPagination();
        StateHasChanged();
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            ApplyPagination();
            StateHasChanged();
        }
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            ApplyPagination();
            StateHasChanged();
        }
    }

    private void GoToLastPage()
    {
        currentPage = totalPages;
        ApplyPagination();
        StateHasChanged();
    }

    private void ToggleViewSection(ViewSection viewSection)
    {
        viewSection.ToggleExpanded();
        StateHasChanged();
    }

    private void ToggleKeySection(KeySection keySection)
    {
        keySection.ToggleExpanded();
        StateHasChanged();
    }

    private void OnLanguageSelectionChanged(ChangeEventArgs e)
    {
        if (e.Value is string[] selectedValues)
        {
            selectedLanguageKeys = selectedValues.ToList();
        }
        else if (e.Value is string singleValue)
        {
            selectedLanguageKeys = new List<string> { singleValue };
        }
        else
        {
            selectedLanguageKeys = new List<string>();
        }
    }

    private void OnTranslationChanged(string newValue, EditableTranslation translation)
    {
        translation.UpdateValue(newValue);
        var changeKey = $"{translation.Language}:{translation.View}:{translation.Key}";

        if (translation.HasChanged)
        {
            changedTranslations[changeKey] = translation;
        }
        else
        {
            changedTranslations.Remove(changeKey);
        }
    }

    private async Task ShowSavePreview()
    {
        if (!changedTranslations.Any())
        {
            Snackbar.Add(translationsService.T("translationsManager", "noChangesToSave"), Severity.Info);
            return;
        }

        var previews = changedTranslations.Values
            .Select(t => new TranslationsSavePreviewDialog.TranslationChangePreview
        {
            LanguageKey = t.Language,
            View = t.View,
            Key = t.Key,
            NewValue = t.Value,
            OriginalValue = t.OriginalValue,
            IsNew = t.Id == 0 && !string.IsNullOrWhiteSpace(t.Value)
        }).ToList();

        var parameters = new DialogParameters
        {
            ["ChangedTranslations"] = previews,
            ["Languages"] = languages
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };
        var dialog = await DialogService.ShowAsync<TranslationsSavePreviewDialog>(translationsService.T("translationsManager", "reviewChangesTitle"), parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await SaveTranslations();
        }
    }

    private async Task SaveTranslations()
    {
        isSaving = true;

        try
        {
            var translationsToUpdate = changedTranslations.Values
                .Select(t => new Translation(
                    t.Id,
                    t.Language,
                    t.View,
                    t.Key,
                    t.Value,
                    DateTime.UtcNow
                ))
                .ToList();

            await translationsService.UpdateTranslations(translationsToUpdate);
            
            var message = translationsService.T("translationsManager", "successfullySavedMessage", translationsToUpdate.Count);
            await DialogService.ShowMessageBox(
                translationsService.T("translationsManager", "translationsSavedTitle"), 
                message, 
                yesText: "OK");

            changedTranslations.Clear();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"{translationsService.T("translationsManager", "failedToSaveTranslations")}: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }
}