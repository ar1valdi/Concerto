@inherits MudComponentBase

@inject ITranslationsService translationsService
@inject ILanguageManagementService languageManagementService

<MudExpansionPanels MultiExpansion="true">
    @foreach (var viewSection in viewSections)
    {
        <MudExpansionPanel
            Text="@viewSection.View">
            @foreach (var keySection in viewSection.KeySections)
            {
                <MudExpansionPanel
                    Text="@keySection.Key">
                    @foreach (var translation in keySection.Translations)
                    {
                        <MudTextField
                            Value="@translation.Value"
                            ValueChanged="((x) => OnTranslationChanged(x, translation))"
                            Label="@translation.Language.ToUpper()"
                            T="string"
                            Variant="Variant.Outlined"
                            Margin="Margin.Normal"/>
                    }
                </MudExpansionPanel>
            }
        </MudExpansionPanel>
    }
</MudExpansionPanels>

<MudButton
    Variant="Variant.Filled"
    StartIcon="@Icons.Material.Filled.Save"
    Color="Color.Primary"
    Style="position: fixed; bottom: 20px; right: 20px;"
    OnClick="@(async () => { await OnSubmit(); })">
    Save
</MudButton>


@code {
    private class KeySection
    {
        public string Key { get; set; } = string.Empty;
        public List<Translation> Translations { get; set; } = [];
    }
    private class ViewSection
    {
        public string View { get; set; } = string.Empty;
        public List<KeySection> KeySections { get; set; } = [];
    }

    List<ViewSection> viewSections = [];
    List<Language> languages = [];
    string selectedLanguage = string.Empty;
    Dictionary<long, Translation> changedTranslations = [];
    bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        selectedLanguage = translationsService.GetCurrentLanguage();
        languages = await languageManagementService.GetAvailableLanguagesAsync();
        var translations = await translationsService.FetchFullTranslationsAsync();

        viewSections = translations.GroupBy(t => t.View).Select(g => new ViewSection {
            View = g.Key,
            KeySections = g.GroupBy(t => t.Key).Select(k => new KeySection {
                Key = k.Key,
                Translations = k.ToList()
            }).ToList()
        }).ToList();
    }

    public void OnTranslationChanged(string newValue, Translation changedTranslation)
    {
        if (newValue == changedTranslation.Value)
        {
            changedTranslations.Remove(changedTranslation.Id);
        }
        else
        {
            changedTranslations[changedTranslation.Id] = new Translation(
                changedTranslation.Id,
                changedTranslation.Language,
                changedTranslation.View,
                changedTranslation.Key,
                newValue,
                changedTranslation.LastUpdated);   
        }
    }

    public async Task OnSubmit()
    {
        var changedTranslationsList = changedTranslations
            .Select(x => x.Value)
            .ToList();
        
        isSaving = true;
        await translationsService.UpdateTranslations(changedTranslationsList);
        isSaving = false;
    }
}