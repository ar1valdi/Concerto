@implements IDisposable
@inject IStorageService StorageService
@inject ITranslationsService translationsService

<MudBadge Style="cursor: pointer; user-select: none;" Content="ActiveUploadsNumber" Color="Color.Info" Overlap="true" Origin="Origin.CenterLeft" OnClick="ToggleOpen" Visible="@(ActiveUploadsNumber > 0)">
    <MudButton title="@translationsService.T("uploadManager", "uploads")" OnClick="ToggleOpen">
		<ChildContent>
			<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Sharp.Upload" Size="IconSize" />
			<MudIcon Style="color: var(--mud-palette-appbar-text); margin-left: -10px" Icon="@Icons.Material.Filled.ArrowDropDown" Size="IconSize" />
		</ChildContent>
	</MudButton>
</MudBadge>

@if (_isOpen)
{
	<div @onclick="ToggleOpen" style="cursor: pointer; position: fixed; top:0; left: 0; height: 100vh; width: 100vw;" class="z-max">
		<div @onclick:stopPropagation="true" @ontouchstart:stopPropagation="true" @ontouchend:stopPropagation="true" style="cursor: auto;">
				<MudTable Items="_items" Context="item" Dense="true" Hover="true" Outlined="true" FixedHeader="true" Elevation="6" RowClass=""
					  Style="position: fixed; top: 40px; right: 10px; max-height: min(500px, calc(100vh - 64px)); display:grid; grid-template-rows: 1fr;" Height="100%">

					<ToolBarContent>
            <MudText Typo="Typo.subtitle2" Class="pr-4">@(_items.Any() ? translationsService.T("uploadManager", "uploads") : translationsService.T("uploadManager", "noUploads"))</MudText>
							<MudSpacer />
						<MudIconButton Disabled="@(ActiveUploadsNumber == _items.Count)" @ontouchend="() => StorageService.ClearInactiveUploads()" OnClick="(() => StorageService.ClearInactiveUploads())"
									   DisableElevation="true" Variant="Variant.Filled" Icon="@Icons.Material.Filled.ClearAll" Color="Color.Default" Size="Size.Small"
                                   Title="@translationsService.T("uploadManager", "clearHistory")" />
								<MudIconButton OnClick="ToggleOpen" @ontouchend="() => StorageService.ClearInactiveUploads()"
									   Icon="@Icons.Material.Filled.Close" DisableElevation="true" Variant="Variant.Filled" Size="Size.Small" Color="Color.Default"
                                       Title="@translationsService.T("common", "close")" />
					</ToolBarContent>
					
						<ColGroup>
						@if (LayoutState.Xs)
						{
							<col />
							<col />
							<col />
							<col />
							<col />
						}
						else
						{
							<col />
							<col style="min-width: 50px" />
							<col style="min-width: 100px" />
							<col />
							<col />
						}

						</ColGroup>

						<RowTemplate>
							<MudTd Class="px-2">
							@if (item.IsInProgress)
							{
								<MudIcon Size="Size.Small" Icon="@(item.Progress > 0 ? Icons.Material.Filled.Upload : Icons.Material.Filled.HourglassTop)" Color="Color.Info" />
							}
							else if (item.IsComplete)
							{
								<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
							}
							else if (item.IsCancelled)
							{
                                <MudTooltip Inline="false" Class="z-max" Text="@translationsService.T("uploadManager", "cancelled")">
									<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Cancel" Color="Color.Default" />
								</MudTooltip>
							}
							else if (item.IsError)
							{
                                <MudTooltip Class="z-max break-word" Text="@($"{translationsService.T("uploadManager", "errorCodePrefix")} {item.Result?.ErrorCode}\n\n{translationsService.T("uploadManager", "errorPrefix")}\n{item.Result?.ErrorMessage}")">
									<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Error" Color="Color.Error" />
								</MudTooltip>
							}
						</MudTd>

						<MudTd title="@item.Name" Style="max-width: 250px;" Class="@($"px-2 {(item.IsCancelled ? "text-line-through" : string.Empty)}")">
							<p style="white-space: nowrap; overflow: hidden; text-overflow: ellipsis;"
						   class="@(item.IsCancelled ? "text-line-through" : string.Empty)">
								@item.Name
							</p>
						</MudTd>

						<MudTd Class="px-2">
							<MudProgressLinear Color="@(item.IsComplete? Color.Success : item.IsCancelled ? Color.Default : item.IsError ? Color.Error : Color.Primary)"
										   Value="item.Progress" Class="" />
						</MudTd>

						<MudTd Class="px-2">
							<p>
								@($"{item.Progress}%")
							</p>
						</MudTd>

						<MudTd Class="px-2">
							@if (item.IsInProgress)
							{
                                <MudIconButton Title="@translationsService.T("common", "cancel")" OnClick="() => CancelUpload(item)"
									   DisableElevation="true" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Cancel" Size="Size.Small" />
							}
							else
							{
                                <MudIconButton Title="@translationsService.T("uploadManager", "clear")" OnClick="() => StorageService.ClearIfInactive(item)"
									   DisableElevation="true" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Clear" Size="Size.Small" />
							}
						</MudTd>
					</RowTemplate>

				</MudTable>
		</div>
	</div>
}

@*<MudOverlay Visible="_isOpen" OnClick="ToggleOpen" LockScroll="false" />*@

@code {
	[CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

	IReadOnlyCollection<UploadQueueItem> _items = new List<UploadQueueItem>();

	public bool _isOpen = false;
	public int ActiveUploadsNumber = 0;

	Size IconSize => LayoutState.Xs ? Size.Medium : Size.Large;

	public void ToggleOpen()
	{
		if (_isOpen)
			_isOpen = false;
		else
			_isOpen = true;
	}

	public void Open()
	{
		_isOpen = true;
	}

	protected override void OnInitialized()
	{
		StorageService.QueueChangedEventHandler += OnQueueChanged;
		StorageService.NewQueueItemsEventHandler += OnNewQueueItems;
	}

	private void CancelUpload(UploadQueueItem item)
	{
		item.Cancellation.Cancel();
	}

	private void OnQueueChanged(object? sender, IReadOnlyCollection<UploadQueueItem> items)
	{
		_items = items.OrderByDescending(x => x.IsUploading).ThenByDescending(x => x.IsPending).ToList();
		ActiveUploadsNumber = _items.Where(i => i.IsInProgress).Count();
		StateHasChanged();
	}

	private void OnNewQueueItems(object? sender, IReadOnlyCollection<UploadQueueItem> items)
	{
		Open();
		OnQueueChanged(sender, items);
	}


	public void Dispose()
	{
		StorageService.QueueChangedEventHandler -= OnQueueChanged;
		StorageService.NewQueueItemsEventHandler -= OnNewQueueItems;
	}
}
