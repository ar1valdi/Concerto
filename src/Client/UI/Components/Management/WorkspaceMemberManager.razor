@inherits MudComponentBase

@inject ITranslationsService translationsService

<MudTable Comparer="_comparer" T="WorkspaceUser" Items="Items" Loading="Loading" Filter="new Func<WorkspaceUser, bool>(Filter)"
          RowClassFunc="RowClassFunc" ReadOnly="true" AllowUnsorted="false"
          RowsPerPage="PageSize.Default"
          SortLabel="Sort By" Dense="true" Hover="true" Outlined="true" FixedFooter="true" FixedHeader="true"
          Height="100%" Class="@Class" Style="@TableStyle">

    <ToolBarContent>
        <MudText Typo="Typo.subtitle1">@translationsService.T("workspaceMemberManager", "title")</MudText>
        <MudSpacer />
        <MudSwitch Disabled="Editing" Class="ml-2" @bind-Checked="@_addMembers" Color="Color.Primary">@translationsService.T("workspaceMemberManager", "addMembers")</MudSwitch>
        <MudSpacer />
        <MudTextField Clearable="true" @bind-Value="_searchString" Immediate="true" Placeholder="@translationsService.T("common", "search")" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" Class="ma-0"></MudTextField>
    </ToolBarContent>

    <ColGroup>
        @if (LayoutState.Xs)
        {
            <col />
            <col />
            <col />
            <col />
            <col />
        }
        else
        {
            <col style="padding: 0; width: 20px" />
            <col style="width: 50px" />
            <col style="min-width: 100px" />
            <col style="min-width: 100px" />
            <col style="min-width: 100px" />
            <col style="min-width: 230px" />
            <col style="min-width: 90px;" />
        }
    </ColGroup>

    <HeaderContent>
        @if (!LayoutState.Xs)
        {
            <MudTh>
                <MudCheckBox T="bool?" Dense="true" Disabled="Editing" CheckedChanged="SelectAllClicked" Checked="_selectAllState" />
            </MudTh>
        }

        <MudTh Style="padding-right: 0">
            <MudTableSortLabel SortBy="new Func<WorkspaceUser, object>(x => SelectedWorkspaceUsers.Contains(x))">@translationsService.T("workspaceMemberManager", "memberColumn")</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<WorkspaceUser, object>(x => Users[x.UserId].FirstName)">@translationsService.T("workspaceMemberManager", "nameColumn")</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<WorkspaceUser, object>(x => Users[x.UserId].LastName)" InitialDirection="SortDirection.Ascending">@translationsService.T("workspaceMemberManager", "surnameColumn")</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<WorkspaceUser, object>(x => Users[x.UserId].Username)">@translationsService.T("workspaceMemberManager", "usernameColumn")</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<WorkspaceUser, object>(x => SelectedWorkspaceUsers.Contains(x) ? x.Role.ToDisplayString() : string.Empty)">@translationsService.T("workspaceMemberManager", "roleColumn")</MudTableSortLabel>
        </MudTh>
        <MudTh>@translationsService.T("common", "actions")</MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "memberColumn")">
            <MudCheckBox Class="py-2" T="bool" CheckedChanged="() => CheckedChanged(context)" Dense="true" Disabled="Editing" Checked="@SelectedWorkspaceUsers.Contains(context)" />
        </MudTd>
        @if (!LayoutState.Xs)
        {
            <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "memberColumn")">←</MudTd>
        }
        <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "nameColumn")">@Users[context.UserId].FirstName</MudTd>
        <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "surnameColumn")">@Users[context.UserId].LastName</MudTd>
        <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "usernameColumn")">@Users[context.UserId].Username</MudTd>

        @if (_editedUser?.UserId == context.UserId)
        {

            <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "roleColumn")" Style="min-width: 200px;">
                <WorkspaceRolePicker @bind-Value="context.Role" />
            </MudTd>

            <MudTd DataLabel="@translationsService.T("common", "actions")" Style="justify-content: space-between;">
                <div>
                    <MudIconButton Title="@translationsService.T("common", "apply")" Size="Size.Small" Icon="@Icons.Material.Filled.Check" OnClick="ApplyEdit" />
                    <MudIconButton Title="@translationsService.T("common", "cancel")" Size="Size.Small" Icon="@Icons.Material.Filled.Cancel" OnClick="CancelEdit" />
                </div>
            </MudTd>
        }
        else
        {
            @if (SelectedWorkspaceUsers.Contains(context))
            {
                <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "roleColumn")" Style="min-width: 200px;">
                    @context.Role.ToDisplayString()
                </MudTd>


                <MudTd Class="d-flex" DataLabel="@translationsService.T("common", "actions")">
                    <MudIconButton Title="@translationsService.T("common", "settings")" Size="Size.Small" Icon="@Icons.Material.Filled.Settings" OnClick="() => _editedUser = context" />
                    @if (IsModified(context))
                    {
                        <MudIconButton Title="@translationsService.T("common", "restore")" Disabled="Editing" Size="Size.Small" Icon="@Icons.Material.Filled.Restore" OnClick="() => RestoreUser(context)" />
                    }
                </MudTd>

            }
            else
            {
                <MudTd DataLabel="@translationsService.T("workspaceMemberManager", "roleColumn")" Style="min-width: 200px;">-</MudTd>
                <MudTd DataLabel="@translationsService.T("common", "actions")" />
            }
        }

    </RowTemplate>

    <FooterContent>
        <MudTd DataLabel="">
            <MudCheckBox T="bool?" Dense="true" Disabled="Editing" CheckedChanged="SelectAllClicked" Checked="_selectAllState" />
        </MudTd>
        <MudTd colspan="1">@translationsService.T("workspaceMemberManager", "selectAll")</MudTd>
        <MudTd colspan="5">
            @translationsService.T("workspaceMemberManager", "legend"):
            <MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-new">@translationsService.T("workspaceMemberManager", "legendNew")</MudButton>
            <MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-modified">@translationsService.T("workspaceMemberManager", "legendModified")</MudButton>
            <MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-deleted">@translationsService.T("workspaceMemberManager", "legendDeleted")</MudButton>
            <MudButton Style="pointer-events: none;" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Class="row-colored row-edited">@translationsService.T("workspaceMemberManager", "legendEditing")</MudButton>
        </MudTd>
    </FooterContent>

    <PagerContent>
        <MudTablePager Style="" Class="" PageSizeOptions="PageSize.DefaultOptions" />
    </PagerContent>

</MudTable>

@code
{
    [CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

    [Parameter]
    public HashSet<WorkspaceUser> SelectedWorkspaceUsers { get; set; } = new(new WorkspaceUserIdEqualityComparer());

    [Parameter]
    public EventCallback<HashSet<WorkspaceUser>> SelectedWorkspaceUsersChanged { get; set; }

    [Parameter]
    public HashSet<WorkspaceUser> ExistingWorkspaceUsers { get; set; } = null!;

    [Parameter]
    public HashSet<WorkspaceUser> AvailableWorkspaceUsers { get; set; } = null!;

    [Parameter]
    public Dictionary<Guid, User> Users { get; set; } = null!;

    string TableStyle => LayoutState.Xs
    ? $"display:grid; grid-template-rows: min-content min-content 1fr min-content; {Style}"
    : $"display:grid; grid-template-rows: min-content 1fr min-content; {Style}";


    Size Size => LayoutState.Xs ? Size.Small : Size.Medium;


    private bool? _selectAllState => SelectedWorkspaceUsers.Count == Items.Count() ? true : SelectedWorkspaceUsers.Count > 0 ? null : false;

    bool Loading => AvailableWorkspaceUsers is null || Users is null;

    IEnumerable<WorkspaceUser> CurrentMembers => AvailableWorkspaceUsers.Where(x => ExistingWorkspaceUsers.Contains(x) || SelectedWorkspaceUsers.Contains(x));
    IEnumerable<WorkspaceUser> Items => Loading ? new HashSet<WorkspaceUser>() : !_addMembers ? CurrentMembers : AvailableWorkspaceUsers;

    private string _searchString = "";
    bool _addMembers = false;

    private WorkspaceUser? _editedUser;
    bool Editing => _editedUser is not null;

    private WorkspaceUserIdEqualityComparer _comparer = new();

    private void ApplyEdit()
    {
        _editedUser = null;
        SelectedWorkspaceUsersChanged.InvokeAsync().AndForget();
        StateHasChanged();
    }

    private void CancelEdit()
    {
        if (_editedUser is not null)
        {
            RestoreUser(_editedUser);
            _editedUser = null;
        }

    }

    private void RestoreUser(WorkspaceUser user)
    {
        WorkspaceUser? existingUser;
        var existing = ExistingWorkspaceUsers.TryGetValue(user, out existingUser);
        if (existing && existingUser is not null)
        {
            user.Role = existingUser.Role;
            SelectedWorkspaceUsersChanged.InvokeAsync().AndForget();
            StateHasChanged();
        }
    }


    private void SelectAllClicked()
    {
        switch (_selectAllState)
        {
            case true:
            case null:
                SelectedWorkspaceUsers.ExceptWith(Items);
                break;
            case false:
                SelectedWorkspaceUsers.UnionWith(Items.Where(x => Filter(x)).ToHashSet(new WorkspaceUserIdEqualityComparer()));
                break;
        }
        SelectedWorkspaceUsersChanged.InvokeAsync().AndForget();
        StateHasChanged();
    }

    private void CheckedChanged(WorkspaceUser user)
    {
        if (SelectedWorkspaceUsers.Contains(user)) SelectedWorkspaceUsers.Remove(user);
        else SelectedWorkspaceUsers.Add(user);
        SelectedWorkspaceUsersChanged.InvokeAsync().AndForget();
    }


    private bool Filter(WorkspaceUser user)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (Users[user.UserId].FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Users[user.UserId].LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Users[user.UserId].FullName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (Users[user.UserId].Username.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.Role.ToDisplayString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private bool IsModified(WorkspaceUser workspaceUser)
    {
        WorkspaceUser? existingWorkspaceUser;
        var existing = ExistingWorkspaceUsers.TryGetValue(workspaceUser, out existingWorkspaceUser);
        if (existing && existingWorkspaceUser is not null)
        {
            return existingWorkspaceUser.Role != workspaceUser.Role;
        }
        return false;
    }

    private string RowClassFunc(WorkspaceUser workspaceUser, int rowNumber)
    {
        if (ExistingWorkspaceUsers is null)
            return string.Empty;

        if (_editedUser?.UserId == workspaceUser.UserId)
        {
            return "row-colored row-edited";
        }

        WorkspaceUser? existingWorkspaceUser;
        var existing = ExistingWorkspaceUsers.TryGetValue(workspaceUser, out existingWorkspaceUser);
        var selected = SelectedWorkspaceUsers.Contains(workspaceUser);

        if (selected && existing)
        {
            if (existingWorkspaceUser!.Role != workspaceUser.Role) return "row-colored row-modified"; // Modified
            return string.Empty; // Unchanged}
        }
        if (selected && !existing) return "row-colored row-new"; // New
        if (!selected && existing) return "row-colored row-deleted"; // Deleted

        return string.Empty;
    }
}