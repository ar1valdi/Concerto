@inject ISnackbar Snackbar
@inject IStorageService StorageService
@inject ITranslationsService t

<MudDialog>
	<DialogContent>
		<MudStack Spacing="4">
			<MudTextField @bind-Value="_folderRequest.Name" T="string" Label="@t.T("createFolderDialog", "folderName")"></MudTextField>
			<FolderTypePicker @bind-Value="_folderRequest.Type"></FolderTypePicker>
			<FolderPermissionPicker @bind-Value="_folderRequest.WorkspacePermission" Inherited="ParentFolderPermission"/>
		</MudStack>
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">@t.T("createFolderDialog", "cancel")</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">@t.T("createFolderDialog", "create")</MudButton>
	</DialogActions>
</MudDialog>


@code {

	[CascadingParameter]
	MudDialogInstance Dialog { get; set; } = null!;

	[Parameter]
	public long ParentFolderId { get; set; }

	[Parameter]
	public FolderPermissionType? ParentFolderPermission { get; set; }

	// Form
	CreateFolderRequest _folderRequest = null!;

	protected override void OnInitialized()
	{
		_folderRequest = new CreateFolderRequest
		{
			Name = string.Empty,
			ParentId = ParentFolderId,
			Type = FolderType.Other,
			WorkspacePermission = ParentFolderPermission != null ? new FolderPermission(ParentFolderPermission.Value, true)
				: new FolderPermission(FolderPermissionType.Read, false)
		};
	}

	private async Task Submit()
	{
		if (string.IsNullOrEmpty(_folderRequest.Name))
		{
			Snackbar.Add(@t.T("createFolderDialog", "folderNameCannotBeEmpty"), Severity.Error);
			return;
		}

		try
		{
			await StorageService.CreateFolderAsync(_folderRequest);
			Snackbar.Add(@t.T("createFolderDialog", "folderCreated"), Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		catch
		{
			Snackbar.Add(@t.T("createFolderDialog", "failedToCreateFolder"), Severity.Error);
		}
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

}