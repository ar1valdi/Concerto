@inject ISnackbar Snackbar
@inject ISessionService SessionService
@inject ITranslationsService t

<MudDialog>
	<DialogContent>
		<MudTextField @bind-Value="_sessionName" T="string" Label="@t.T("createSessionDialog", "name")"></MudTextField>
		<MudDatePicker Label="@t.T("createSessionDialog", "date")" @bind-Date="_date"/>
		<MudTimePicker Label="@t.T("createSessionDialog", "time")" @bind-Time="_time"/>
	</DialogContent>

	<DialogActions>
		<MudButton OnClick="Cancel">@t.T("createSessionDialog", "cancel")</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">@t.T("createSessionDialog", "create")</MudButton>
	</DialogActions>
</MudDialog>

@code {

	[CascadingParameter]
	MudDialogInstance Dialog { get; set; } = null!;

	[Parameter]
	public long WorkspaceId { get; set; }

	private string? _sessionName;
	private DateTime? _date = DateTime.Today.AddDays(1);
	private TimeSpan? _time = DateTime.Now.TimeOfDay;

	private async Task Submit()
	{
		if (string.IsNullOrEmpty(_sessionName))
		{
			Snackbar.Add(@t.T("createSessionDialog", "sessionNameCannotBeEmpty"), Severity.Error);
			return;
		}
		if (!_time.HasValue)
		{
			Snackbar.Add(@t.T("createSessionDialog", "timeNotSet"), Severity.Error);
			return;
		}

		if (!_date.HasValue)
		{
			Snackbar.Add(@t.T("createSessionDialog", "dateNotSet"), Severity.Error);
			return;
		}

		// Move to workspace manager
		var createSessionRequest = new CreateSessionRequest
		{
			Name = _sessionName,
			ScheduledDateTime = _date.Value + _time.Value,
			WorkspaceId = WorkspaceId
		};

		try
		{
			await SessionService.CreateSessionAsync(createSessionRequest);
			Snackbar.Add(@t.T("createSessionDialog", "sessionCreated"), Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		catch (SessionException)
        {
			Snackbar.Add(@t.T("createSessionDialog", "failedToCreateSession"), Severity.Error);
            return;
        }
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

}