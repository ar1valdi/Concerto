@inject ISnackbar Snackbar
@inject IStorageService StorageService
@inject ITranslationsService t

<MudDialog>
	<TitleContent>
			<MudText Typo="Typo.h6">
				<MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3 mb-n1"/>
				@t.T("updateFileDialog", "title")
			</MudText>
	</TitleContent>
	<DialogContent>
		@if (Loading)
		{
			<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
		}
		else
		{
			<MudTextField @bind-Value="_request.Name" T="string" Label="@t.T("updateFileDialog", "fileNameLabel")"></MudTextField>
		}
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">@t.T("updateFileDialog", "cancel")</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">@t.T("updateFileDialog", "update")</MudButton>
	</DialogActions>
</MudDialog>


@code {

	[CascadingParameter]
	MudDialogInstance Dialog { get; set; } = null!;

	[Parameter]
	public long EditedFileId { get; set; }

	private bool Loading => _request == null;

	private FileSettings _settings = null!;
	private UpdateFileRequest _request = null!;

	protected override async Task OnInitializedAsync()
	{
		_settings = await StorageService.GetFileSettingsAsync(EditedFileId);
		_request = new UpdateFileRequest
		{
			FileId = _settings.Id,
			Name = _settings.Name
		};
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

	private async Task Submit()
	{
		if (string.IsNullOrEmpty(_request.Name))
		{
			Snackbar.Add(@t.T("updateFileDialog", "fileNameCannotBeEmpty"), Severity.Error);
			return;
		}
		try
		{
			await StorageService.UpdateFileAsync(_request);
			Snackbar.Add($"{@t.T("updateFileDialog", "file")} {_settings.Name} {@t.T("updateFileDialog", "updated")}", Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		catch
		{
			Snackbar.Add($"{@t.T("updateFileDialog", "failedToUpdateFile")} {_settings.Name}", Severity.Error);
		}
	}

}