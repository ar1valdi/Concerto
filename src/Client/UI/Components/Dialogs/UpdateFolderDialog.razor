@inherits DialogAutoFullscreen
@inject IWorkspaceService WorkspaceService
@inject ISnackbar Snackbar
@inject IStorageService StorageService

<MudDialog>
	<TitleContent>
		<MudText Typo="Typo.h6">
			<MudIcon Icon="@Icons.Material.Filled.Settings" Class="mr-3 mb-n1"/>
			Folder settings
		</MudText>
	</TitleContent>
	<DialogContent>
		@if (Loading)
		{
			<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
		}
		else
		{
			<MudStack Spacing="4">
				<MudTextField Disabled="_permanent" @bind-Value="_request.Name" T="string" Label="Folder name"></MudTextField>
				<FolderTypePicker Disabled="_permanent" @bind-Value="_request.Type"></FolderTypePicker>
				<FolderPermissionPicker @bind-Value="_request.WorkspacePermission" Inherited="_parentPermissionType"/>

				<MudPaper Elevation="0" Outlined="true" Class="d-flex flex-column" Style="overflow: auto;">
					<MudText Class="ml-4 align-self-start"> User specific permissions
					<MudTooltip Style="vertical-align: middle;" Class="align-self-start" Text="Those settings will override folder permissions for specified users" Arrow="true">
						<MudIcon Class="d-inline-block" Icon="@Icons.Material.Filled.Info"/>
					</MudTooltip>
					</MudText>
					<UserFolderPermissionPicker @bind-UserFolderPermissions="_request.UserPermissions" ParentUserFolderPermissions="ParentUserFolderPermissions" Users="WorkspaceUsers"
											Style="min-heigh: 400px; max-height:calc(100vh - 450px);" />
				</MudPaper>
			</MudStack>
		}
	</DialogContent>
	<DialogActions>
		<MudButton OnClick="Cancel">Cancel</MudButton>
		<MudButton Color="Color.Primary" OnClick="Submit">Update</MudButton>
	</DialogActions>
</MudDialog>


@code {
	[Parameter]
	public long EditedFolderId { get; set; }

	private bool Loading { get; set; }

	private FolderPermissionType? _parentPermissionType;
	public HashSet<UserFolderPermission> ParentUserFolderPermissions { get; set; } = null!;
	private HashSet<User>? WorkspaceUsers;

	// Form
	private UpdateFolderRequest _request = null!;

	bool _permanent = false;

	protected override async Task OnInitializedAsync()
	{
		Loading = true;
		var folderSettings = await StorageService.GetFolderSettingsAsync(EditedFolderId);
		_permanent = folderSettings.IsPermanent;
		WorkspaceUsers = (await WorkspaceService.GetWorkspaceUsersAsync(folderSettings.WorkspaceId)).ToHashSet();
		_request = new UpdateFolderRequest(folderSettings.Id)
		{
			Name = folderSettings.Name,
			Type = folderSettings.Type,
			WorkspacePermission = folderSettings.WorkspacePermission,
			UserPermissions = new HashSet<UserFolderPermission>(folderSettings.UserPermissions),
			forceInherit = false
		};
		ParentUserFolderPermissions = folderSettings.ParentUserPermissions.ToHashSet();
		_parentPermissionType = folderSettings.ParentWorkspacePermission?.Type;
		Loading = false;
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

	private async Task Submit()
	{
		if (string.IsNullOrEmpty(_request.Name))
		{
			Snackbar.Add("Folder name cannot be empty", Severity.Error);
			return;
		}
		try
		{
			await StorageService.UpdateFolderAsync(_request);
			Snackbar.Add("Folder updated", Severity.Success);
			Dialog.Close(DialogResult.Ok(true));
		}
		catch
		{
			Snackbar.Add("Failed to update folder", Severity.Error);
		}
	}

}