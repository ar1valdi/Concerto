@inject IWorkspaceService WorkspaceService
@inject ISnackbar Snackbar
@inherits DialogAutoFullscreen

<MudDialog>
	<DialogContent>
		@if (!Loading)
		{
			<div style="height: calc(100vh - 200px)">

				<div style="height: 84px; overflow: scroll;">
					Selected Files:
					@foreach (var file in _selectedItems.OfType<FileItem>())
					{
						<MudChip DisableRipple="true" Value="file" Icon="@file.ToIcon()" Text="@file.FullName" OnClose="closeFileChip" />
					}
				</div>
				
				<FileManager Class="" Style="height: calc(100% - 84px)" Outlined="true" Elevation="0"
						 SelectFilesMode="true" SelectedItems="_selectedItems" OnSelectedItemsChanged="() => StateHasChanged()" InitialFolderId="_workspace!.RootFolderId" />
			</div>
		}
	</DialogContent>
	
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">Cancel</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit">OK</MudButton>
	</DialogActions>
</MudDialog>


@code {

	[Parameter]
	public long WorkspaceId { get; set; }

	private Workspace? _workspace;

	[Parameter, EditorRequired]
	public HashSet<FileItem> SelectedFiles { get; set; } = new(new FolderContentItemIdEqualityComparer());

	public HashSet<FolderContentItem> _selectedItems { get; set; } = new(new FolderContentItemIdEqualityComparer());

	bool Loading => _workspace is null;

	protected override void OnInitialized()
	{
		Dialog.Options.FullWidth = true;
		Dialog.Options.MaxWidth = MaxWidth.Large;
		Dialog.SetOptions(Dialog.Options);

		_selectedItems = new(SelectedFiles, new FolderContentItemIdEqualityComparer());
	}

	protected override async Task OnInitializedAsync()
	{
		_workspace = await WorkspaceService.GetWorkspaceAsync(WorkspaceId);
	}

	private void Submit()
	{
		// Modify SelectedFiles so that it contains the same files as _selectedFiles
		SelectedFiles.Clear();
		SelectedFiles.UnionWith(_selectedItems.OfType<FileItem>());
		Dialog.Close();
	}

	void closeFileChip(MudChip chip)
	{
		_selectedItems.Remove((FolderContentItem)chip.Value);
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

}