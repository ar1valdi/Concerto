@inherits DialogAutoFullscreen

@inject IStorageService StorageService
@inject NavigationManager Navigation
@inject ITranslationsService t

		<style>
			.preview {
				display: flex;
				flex-grow: 1;
				height: calc(100vh - 200px);
				width: 1230px;
			}

			.preview-fs {
				display: flex;
				flex-grow: 1;
				height: calc(100vh - 140px);
				width: 100%;
			}

			.preview-audio {

			}

			.preview-audio-fs {
				display: flex;
				flex-direction: row;
				align-items: center;
				justify-content: center;
				height: calc(100vh - 140px);
				width: 100%;
			}

		</style>

<MudDialog>
	<DialogContent>

		@if(File is not null && _url is not null)
		{
			@switch(_mimeType)
			{
                case "image":
					<img src="@_url" class="@previewClass" />
                    break;
				case "video":
					<video src="@_url" controls playsinline class="@previewClass"></video>
                    break;
				case "audio":
					<div class="@audioPreviewClass">
						<audio src="@_url" controls class="flex-grow-1"></audio>
					</div>
					break;
				default:
					if(_fullMimeType == "application/pdf" && !LayoutState.IsIos)
					{
						<object data="@_url" type="@_fullMimeType" class="@previewClass">
							<p>@t.T("filePreviewDialog", "browserDoesntSupportPdf")</p>
						</object>
					}
					else
					{
					<p>@t.T("filePreviewDialog", "cannotPreviewFile")</p>
                    }
                break;
            
			}

		}
	</DialogContent>
	
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Cancel">@t.T("filePreviewDialog", "close")</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="Submit">@t.T("filePreviewDialog", "download")</MudButton>
	</DialogActions>
</MudDialog>


@code {

	[Parameter]
	public FileItem File { get; set; } = null!;

	private string? _url;

	private string? _fullMimeType;
	private string? _mimeType;

	private string previewClass => IsFullScreen ? "preview-fs" : "preview";
	private string audioPreviewClass => IsFullScreen ? "preview-audio-fs" : "preview-audio";

	protected override async Task OnInitializedAsync()
	{
		if(File is null) throw new ArgumentNullException(nameof(File));
		_url = await StorageService.GetFileUrl(File.Id, true);

		var mime = File.MimeType.ToLower();
		_fullMimeType = mime;

		var mimeSplit = mime.Split('/');
		if(mimeSplit.Length > 1)
            _mimeType = mimeSplit[0];
		else 
			_mimeType = mime;
	}

	private async Task Submit()
	{
		await StorageService.DownloadFile(File.Id, File.FullName);
	}

	void Cancel()
	{
		Dialog.Cancel();
	}

}