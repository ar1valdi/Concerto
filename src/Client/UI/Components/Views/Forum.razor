@using Concerto.Client.UI.Components
@using Concerto.Client.Extensions
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JsRuntime
@inject IForumService ForumService
@inject IUserService UserService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IStorageService StorageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITranslationsService t

@if (Loading)
{
	<LoadingIndicator Color="Color.Primary" Size="Size.Large" />
}
else
{
	<div style="display:flex; flex-direction: column-reverse; overflow: auto; min-height: 100%; min-width: 100%;">
	<MudStack Reverse="true" Class="flex-grow-1 pa-4" Justify="Justify.FlexStart" Style="height: 100%; width: 100%;" id="messagesContainer">

		@if (_createPostRequest is null)
		{
			<MudFab Size="Size.Medium" Class="z-20" Style="position: absolute" Color="Color.Default" StartIcon="@Icons.Material.Filled.Refresh" OnClick="async () => {Posts = null; await LoadMorePosts();}" />
			<MudPaper Elevation="0" Outlined="!ViewOnly" Class="ml-16">
				@if (!ViewOnly)
				{
					<MudButton Style="width: 100%;" Size="Size.Large" Class="flex-shrink-0" StartIcon="@Icons.Material.Filled.PostAdd" OnClick="CreatePost">@t.T("forum", "createPost")</MudButton>
				}
			</MudPaper>
		}
		else
		{
			<MudPaper Class="pa-2 mt-2" Elevation="0" Outlined="true">
				<MudForm @ref="_createPostForm" @bind-IsValid="@_createPostRequestValid">

					<MudButton StartIcon="@Icons.Material.Filled.Send" OnClick="async () => await SendPost()" Disabled="!_createPostRequestValid" Color="Color.Primary">@t.T("forum", "createPost")</MudButton>
					<MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="CancelCreatePost" Color="Color.Error">@t.T("forum", "cancel")</MudButton>
					<MudTextField Immediate="true" @bind-Value="_createPostRequest.Title" Validation="Validation.NotEmpty" Label="@t.T("forum", "titleLabel")" Variant="Variant.Outlined" />

					<div style="min-height: 24px; max-height: 96px; overflow: auto;" class="mt-1 pa-0">
						@t.T("forum", "files")
						@foreach (var file in _createPostFiles)
						{
							<MudChip DisableRipple="true" Value="file" Icon="@file.ToIcon()" Text="@file.FullName" OnClose="CloseCreatePostFileChip" />
						}
						<MudIconButton Title="@t.T("forum", "addRemoveFiles")" DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" OnClick="async () => await EditReferencedFiles(_createPostFiles)" />
					</div>

					<MudTextField Immediate="true" @bind-Value="_createPostRequest.Content" Validation="Validation.NotEmpty" Label="@t.T("forum", "postContentLabel")" Variant="Variant.Outlined" Lines="10" />
				</MudForm>

			</MudPaper>
		}

		@if (OnlyRelatedToFile is not null && !Posts!.Any())
		{
			<MudText Typo="Typo.h6" Class="ml-10" Align="Align.Center">
				@t.T("forum", "noPostsRelatedToFile") @OnlyRelatedToFile.FullName
			</MudText>
		}
		@foreach (var post in Posts!)
		{
			<MudPaper Class="pa-4" Elevation="0" Outlined="false" Style="background-color: var(--mud-palette-background)">
				<MudPaper Class="pa-4" Elevation="0" Outlined="true">

					@if (_editPostRequest is not null && _editPostRequest.PostId == post.Id)
					{
						<MudPaper Class="pa-2 mt-2" Elevation="0" Outlined="true">
							<MudForm @ref="_editPostForm" @bind-IsValid="@_editPostRequestValid">
							<MudButton StartIcon="@Icons.Material.Filled.Send" OnClick="async () => await SavePost()" Disabled="!_editPostRequestValid" Color="Color.Primary">@t.T("forum", "editPost")</MudButton>
							<MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="CancelEditPost" Color="Color.Error">@t.T("forum", "cancel")</MudButton>
							<MudTextField @bind-Value="_editPostRequest.Title" Validation="Validation.NotEmpty" Label='@t.T("forum", "titleLabel")' Variant="Variant.Outlined" />
								<div style="min-height: 24px; max-height: 96px; overflow: auto;" class="mt-1 pa-0">
								@t.T("forum", "files")
									@foreach (var file in _editPostFiles)
									{
										<MudChip DisableRipple="true" Value="file" Icon="@file.ToIcon()" Text="@file.FullName" OnClose="CloseEditPostFileChip" />
									}
								<MudIconButton Title='@t.T("forum", "addRemoveFiles")' DisableElevation="true" Size="Size.Small" Variant="Variant.Filled" Icon="@Icons.Material.Filled.Add" OnClick="async () => await EditReferencedFiles(_editPostFiles)" />
								</div>
							<MudTextField @bind-Value="_editPostRequest.Content" Validation="Validation.NotEmpty" Label='@t.T("forum", "postContentLabel")' Variant="Variant.Outlined" Lines="10" />
							</MudForm>
						</MudPaper>
					}
					else
					{
						@*Header author*@
						<MudStack Row="true" Spacing="0" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Start">
							<MudStack Spacing="0" Class="mb-2">
								<MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Baseline">
									<MudAvatar Class="" Size="Size.Small">@post.Author.Initials</MudAvatar>
                                    <MudText Typo="Typo.caption">@($"{post.Author.FullName} posted on {post.CreatedAt.ToLocalTime()}{(post.Edited ? " " + t.T("forum", "editedSuffix") : "")}")</MudText>
									</MudStack>
									<MudText Typo="Typo.h6" Style="white-space: pre-wrap; word-break: break-word;">@post.Title</MudText>
								</MudStack>

								<MudMenu Dense="true" Class="align-self-start">
									<ActivatorContent>
										<MudIconButton Title='@t.T("forum", "actions")' DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
									</ActivatorContent>
									<ChildContent>
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Edit" OnTouch="() => EditPost(post)" OnClick="() => EditPost(post)" Disabled=@(!post.CanEdit)>@t.T("forum", "edit")</MudMenuItemW>
										<MudMenuItemW IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnTouch="async () => await DeletePost(post)" OnClick="async () => await DeletePost(post)" Disabled=@(!post.CanDelete)>@t.T("forum", "delete")</MudMenuItemW>
									</ChildContent>
								</MudMenu>
							</MudStack>

						@*Post content*@
						@if(post.ReferencedFiles.Any())
						{
							<div style="min-height: 24px; max-height: 96px; overflow: auto;" class="mt-1 pa-0">
								@t.T("forum", "files")
								@foreach (var file in post.ReferencedFiles)
								{
									<MudChip DisableRipple="true" Value="file" Icon="@file.ToIcon()" Text="@file.FullName" OnClick="async () => await StorageService.DownloadFile(file.Id, file.FullName)" />
								}
							</div>
						}
						<MudPaper Elevation="0" Class="">
								<MudText Style="white-space: pre-wrap; word-break: break-word;" Typo="Typo.body1">@post.Content</MudText>
						</MudPaper>
					}
				</MudPaper>

				<MudPaper Class="d-flex flex-column-reverse ml-16" Elevation="0">

					@if (post.Id != _createCommentRequest?.PostId)
					{
						<MudPaper Class="mt-2" Elevation="0" Outlined="true">
							<MudButton Style="width: 100%" StartIcon="@Icons.Material.Filled.AddComment" OnClick="() => Comment(post)">@t.T("forum", "addComment")</MudButton>
						</MudPaper>
					}
					else
					{
						<MudPaper Class="pa-2 mt-2" Elevation="0" Outlined="true">
							<MudForm @ref="_createCommentForm" @bind-IsValid="@_createCommentRequestValid">
								<MudButton StartIcon="@Icons.Material.Filled.Send" OnClick="async () => await SendComment()" Disabled="!_createCommentRequestValid" Color="Color.Primary">@t.T("forum", "sendComment")</MudButton>
								<MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="CancelComment" Color="Color.Error">@t.T("forum", "cancel")</MudButton>
								<MudTextField @bind-Value="_createCommentRequest.Content" Validation="Validation.NotEmpty" Label="@t.T("forum", "commentLabel")" Variant="Variant.Outlined" Lines="3" />
							</MudForm>

						</MudPaper>
					}
					@*Comments*@
					@foreach (var comment in post.Comments)
					{
						@*Comment*@
						@if (_editCommentRequest is not null && _editCommentRequest.CommentId == comment.Id)
						{
							<MudPaper Class="pa-2 mt-2" Elevation="0" Outlined="true">
								<MudForm @ref="_editCommentForm" @bind-IsValid="@_editCommentRequestValid">
								<MudButton StartIcon="@Icons.Material.Filled.Send" OnClick="async () => await SaveComment()" Disabled="!_editCommentRequestValid" Color="Color.Primary">@t.T("forum", "sendComment")</MudButton>
								<MudButton StartIcon="@Icons.Material.Filled.Cancel" OnClick="CancelEditComment" Color="Color.Error">@t.T("forum", "cancel")</MudButton>
								<MudTextField @bind-Value="_editCommentRequest.Content" Validation="Validation.NotEmpty" Label='@t.T("forum", "commentLabel")' Variant="Variant.Outlined" Lines="3" />
								</MudForm>
							</MudPaper>
						}
						else
						{
							<MudPaper Class="d-flex justify-space-between mt-2 pa-2" Elevation="0" Outlined="true">
								<MudStack Spacing="0" Class="">
									<MudStack Row="true" Justify="Justify.FlexStart" AlignItems="AlignItems.Baseline">
										<MudAvatar Class="" Size="Size.Small">@comment.Author.Initials</MudAvatar>
                                        <MudText Typo="Typo.caption">@($"{comment.Author.FullName} commented on {comment.CreatedAt.ToLocalTime()}{(comment.Edited ? " " + t.T("forum", "editedSuffix") : "")}")</MudText>
									</MudStack>
										<MudText Style="white-space: pre-wrap; word-break: break-word;" Class="mt-1" Typo="Typo.body2">@comment.Content</MudText>
								</MudStack>
								

									<MudMenu Dense="true" Class="align-self-start">
										<ActivatorContent>
										<MudIconButton Title='@t.T("forum", "actions")' Size="Size.Small" DisableElevation="true" Icon="@Icons.Material.Filled.MoreVert" Color="Color.Default" Variant="Variant.Filled" />
										</ActivatorContent>
										<ChildContent>
											<MudMenuItemW IconSize="Size.Small" IconColor="Color.Default" Icon="@Icons.Material.Filled.Edit" OnTouch="() => EditComment(comment, post.Id)" OnClick="() => EditComment(comment, post.Id)" Disabled=@(!comment.CanEdit)>@t.T("forum", "edit")</MudMenuItemW>
											<MudMenuItemW IconSize="Size.Small" IconColor="Color.Error" Icon="@Icons.Material.Filled.Delete" OnTouch="() => EditComment(comment, post.Id)" OnClick="async () => await DeleteComment(comment)" Disabled=@(!comment.CanDelete)>@t.T("forum", "delete")</MudMenuItemW>
										</ChildContent>
									</MudMenu>
								</MudPaper>
						}
					}

					@if (post.CommentsCount > post.Comments.Count)
					{
						<MudButton Class="mt-1" StartIcon="@Icons.Material.Filled.UnfoldMore" OnClick="async () => await LoadMoreComments(post)">@t.T("forum", "showMoreComments")</MudButton>
					}


				</MudPaper>

			</MudPaper>
		}

		@if (_morePostsAvailable)
		{
			<MudButton Style="width: 100%" Class="flex-shrink-0" StartIcon="@Icons.Material.Filled.UnfoldMore" OnClick="async () => await LoadMorePosts()">@t.T("forum", "showMorePosts")</MudButton>
		}
	</MudStack>
	</div>
}

@code {

	[Parameter]
	public string? Title { get; set; } = null!;

	[Parameter]
	public long WorkspaceId { get; set; }

	bool Loading => Posts is null;

	[Parameter]
	public FileItem? OnlyRelatedToFile { get; set; }

	[Parameter]
	public EventCallback OnNoPosts { get; set; }

	bool ViewOnly => OnlyRelatedToFile is not null;


	List<Post>? Posts = null;

	MudForm? _createCommentForm;
	CreateCommentRequest? _createCommentRequest = null;
	bool _createCommentRequestValid;

	MudForm? _createPostForm;
	CreatePostRequest? _createPostRequest = null;
	HashSet<FileItem> _createPostFiles = new(new FolderContentItemIdEqualityComparer());
	bool _createPostRequestValid;

	MudForm? _editCommentForm;
	EditCommentRequest? _editCommentRequest = null;
	long? _editCommentPostId = null;
	bool _editCommentRequestValid;

	MudForm? _editPostForm;
	EditPostRequest? _editPostRequest = null;
	HashSet<FileItem> _editPostFiles = new(new FolderContentItemIdEqualityComparer());
	bool _editPostRequestValid;

	bool _morePostsAvailable = true;

	protected override async Task OnInitializedAsync()
	{
		await LoadMorePosts();
		if (Posts is not null && Posts.Count == 0)
			await OnNoPosts.InvokeAsync();
	}

	private async Task LoadMorePosts()
	{
		var oldestPostId = Posts?.LastOrDefault()?.Id;
		var posts = (await ForumService.GetPostsAsync(WorkspaceId, oldestPostId, OnlyRelatedToFile?.Id)).ToList();
		_morePostsAvailable = posts.Count == 10;
		if (Posts is null) Posts = new List<Post>();
		Posts.AddRange(posts);
	}

	private async Task LoadMoreComments(Post post)
	{
		var oldestCommentId = post.Comments.LastOrDefault()?.Id;
		var comments = await ForumService.GetCommentsAsync(post.Id, oldestCommentId);
		post.addComments(comments);
	}

	private void Comment(Post post)
	{
		_createCommentRequest = new CreateCommentRequest(post.Id);
	}

	private void CancelComment()
	{
		_createCommentRequest = null;
	}

	private async Task SendComment()
	{
		if (_createCommentForm is not null) await _createCommentForm.Validate();
		if (!_createCommentRequestValid) return;
		if (_createCommentRequest != null)
		{
			try
			{
				var comment = await ForumService.CreateCommentAsync(_createCommentRequest);
				var post = Posts?.FirstOrDefault(p => p.Id == _createCommentRequest.PostId);
				post?.Comments.Insert(0, comment);
				_createCommentRequest = null;
			}
			catch
			{
				Snackbar.Add(t.T("forum", "failedAddComment"), Severity.Error);
			}
		}
	}

	private void CreatePost()
	{
		_createPostRequest = new CreatePostRequest(WorkspaceId);
		_createPostFiles = new(new FolderContentItemIdEqualityComparer());
	}

	private void CancelCreatePost()
	{
		_createPostRequest = null;
	}

	private void EditPost(Post post)
	{
		_editPostRequest = new EditPostRequest(post.Id, post.Title, post.Content);
		_editPostFiles = new(post.ReferencedFiles, new FolderContentItemIdEqualityComparer());
	}

	private void CancelEditPost()
	{
		_editPostRequest = null;
	}

	private async Task SavePost()
	{
		if (_editPostForm is not null) await _editPostForm.Validate();
		if (!_editPostRequestValid) return;

		if (_editPostRequest != null)
		{
			_editPostRequest.ReferencedFilesIds = _editPostFiles.Select(f => f.Id).ToList();
			try
			{
				var editedPost = await ForumService.UpdatePostAsync(_editPostRequest);
				var post = Posts?.Find(p => p.Id == _editPostRequest.PostId);
				if (post != null)
				{
					post.Title = editedPost.Title;
					post.Content = editedPost.Content;
					post.ReferencedFiles = editedPost.ReferencedFiles;
					post.Edited = true;
				}
				_editPostRequest = null;
			}
			catch
			{
				Snackbar.Add(t.T("forum", "failedEditPost"), Severity.Error);
			}
		}
	}

	private void EditComment(Comment comment, long postId)
	{
		_editCommentPostId = postId;
		_editCommentRequest = new EditCommentRequest(comment.Id, comment.Content);
	}

	private void CancelEditComment()
	{
		_editCommentRequest = null;
	}

	private async Task SaveComment()
	{
		if (_editCommentForm is not null) await _editCommentForm.Validate();
		if (!_editCommentRequestValid) return;

		if (_editCommentRequest is not null && _editCommentPostId is not null)
		{
			try
			{
				await ForumService.UpdateCommentAsync(_editCommentRequest);
				var post = Posts?.FirstOrDefault(p => p.Id == _editCommentPostId);
				var comment = post?.Comments.FirstOrDefault(c => c.Id == _editCommentRequest.CommentId);
				if (comment != null)
				{
					comment.Content = _editCommentRequest.Content;
					comment.Edited = true;
				}
				_editCommentRequest = null;
				_editCommentPostId = null;
			}
			catch
			{
				Snackbar.Add(t.T("forum", "failedEditComment"), Severity.Error);
			}
		}
	}

	private async Task SendPost()
	{
		if (_createPostForm is not null) await _createPostForm.Validate();
		if (!_createPostRequestValid) return;

		if (_createPostRequest != null)
		{
			_createPostRequest.ReferencedFilesIds = _createPostFiles.Select(f => f.Id).ToList();
			try
			{
				var post = await ForumService.CreatePostAsync(_createPostRequest);
				Posts?.Insert(0, post);
				_createPostRequest = null;
			}
			catch
			{
							Snackbar.Add(t.T("forum", "failedCreatePost"), Severity.Error);
			}
		}
	}

	private async Task DeletePost(Post post)
	{
		try
		{
			if (!await DialogService.ShowConfirmationDialog(t.T("forum", "deletePostConfirmTitle"), "delete", "post", post.Title)) return;
			await ForumService.DeletePostAsync(post.Id);
			var postToDeleteIndex = Posts?.FindIndex(p => p.Id == post.Id);
			if (postToDeleteIndex != null) Posts?.RemoveAt(postToDeleteIndex.Value);
			Snackbar.Add(t.T("forum", "postDeleted"), Severity.Success);
		}
		catch
		{
			Snackbar.Add(t.T("forum", "failedDeletePost"), Severity.Error);
		}
	}

	private async Task DeleteComment(Comment comment)
	{
		try
		{
			if (!await DialogService.ShowConfirmationDialog(t.T("forum", "deleteCommentConfirmTitle"), "delete", "comment", "")) return;
			await ForumService.DeleteCommentAsync(comment.Id);
			var post = Posts?.FirstOrDefault(p => p.Id == comment.PostId);
			post?.deleteComment(comment);
			Snackbar.Add(t.T("forum", "commentDeleted"), Severity.Success);
		}
		catch
		{
			Snackbar.Add(t.T("forum", "failedDeleteComment"), Severity.Error);
		}
	}


	private async Task EditReferencedFiles(HashSet<FileItem> referencedFiles)
	{
		await DialogService.ShowSelectFilesDialog(referencedFiles, WorkspaceId);
	}

	private void CloseCreatePostFileChip(MudChip chip)
	{
		_createPostFiles.Remove((FileItem)chip.Value);
	}
	private void CloseEditPostFileChip(MudChip chip)
	{
		_editPostFiles.Remove((FileItem)chip.Value);
	}
}