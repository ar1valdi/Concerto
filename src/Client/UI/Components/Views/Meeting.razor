@using System.Web;

@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IAppSettingsService AppSettingsService
@inject ISessionService SessionService
@inject ITranslationsService t

<div style="@MeetingStyle">
    @if (!LayoutState.IsMobile)
    {
        <div>
            <div id="jitsi" class="flex-grow-1 meeting" style="height: 100%; max-height: 100%;">
                @if (_loading)
                {
                    <LoadingIndicator Size="Size.Large" />
                }
            </div>
        </div>


        <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft" OnClick="ToggleDaw" />

        <div style="@DawStyle">
            @if (_dawInitialized)
            {
                <Daw SessionId="Session?.Id" WorkspaceId="Session?.WorkspaceId" OnListenTogether="PlaySharedMedia" OnRequestStopSharing="StopSharedMedia" />
            }
        </div>
    }
    else
    {
        <div style="height: 100%; display: grid; grid-template-rows: min-content 1fr;">
            <MudButton StartIcon="@Icons.Material.Filled.OpenInNew" Color="Color.Default" Variant="Variant.Filled" DisableElevation="true" Href="@_downloadJitsiUrl" Target="_blank">
                @t.T("meeting", "downloadJitsiApp")
            </MudButton>
            <MudButton StartIcon="@Icons.Material.Filled.OpenInNew" Color="Color.Default" Variant="Variant.Filled" DisableElevation="true" OnClick="OpenInApp">
                @t.T("meeting", "openInApp")
            </MudButton>
        </div>
    }

</div>





@code
{

    [CascadingParameter]
    public LayoutState LayoutState { get; set; } = LayoutState.Default;

    [Parameter]
    public Session? Session { get; set; }

    string _meetingPath = string.Empty;
    CancellationTokenSource startMeetingCancellation = new();

    DotNetObjectReference<Meeting> _dotNetObjectReference = null!;
    IJSObjectReference? _jitsi = null;

    bool _disposed = false;
    bool _loading = true;

    bool _reloading = false;


    string OpenInAppUrl(string token) => LayoutState.IsIos ? $"org.jitsi.meet://{AppSettingsService.AppSettings.JitsiHost}/{_meetingPath}?jwt={token}"
                                              : $"intent://{AppSettingsService.AppSettings.JitsiHost}/{_meetingPath}?jwt={token}&lang=en#jitsi_meet_external_api_id=1&appData.localStorageContent=null#Intent;scheme=org.jitsi.meet;package=org.jitsi.meet;end";

    string _downloadJitsiUrl => AppSettingsService.AppSettings.JitsiAppDownloadUrl;


    protected override void OnInitialized()
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Session is null) return;
        var guid = Session.MeetingGuid.ToString();
        var meetingPath = HttpUtility.UrlPathEncode($"{guid}");
        if (meetingPath == _meetingPath) return;
        _meetingPath = HttpUtility.UrlPathEncode($"{guid}");
        if (LayoutState.IsMobile) return;
        await StartMeeting();
    }

    public async Task StartMeeting()
    {
        if (Session is null) return;
        _loading = true;
        StateHasChanged();
        var token = await SessionService.GetMeetingTokenAsync(Session.MeetingGuid, startMeetingCancellation.Token);
        _jitsi = await JS.InvokeAsync<IJSObjectReference>("startMeeting", startMeetingCancellation.Token, "jitsi", AppSettingsService.AppSettings.JitsiUrl.Host, _meetingPath, token, _dotNetObjectReference);
        _loading = false;
        StateHasChanged();
    }

    private async Task OpenInApp()
    {
        if (Session is null) return;
        var token = await SessionService.GetMeetingTokenAsync(Session.MeetingGuid);
        var url = OpenInAppUrl(token);
        Console.WriteLine(url);
        await JS.InvokeVoidAsync("open", url);
    }

    [JSInvokable]
    public async Task OnVideoConferenceLeft()
    {
        await DisposeJitsiApi();
        await StartMeeting();
    }

    public async Task PlaySharedMedia(string url)
    {
        if (_jitsi == null) return;
        await _jitsi.InvokeVoidAsync("executeCommand", "stopShareVideo");
        await _jitsi.InvokeVoidAsync("executeCommand", "startShareVideo", url);
    }

    public async Task StopSharedMedia()
    {
        if (_jitsi == null) return;
        await _jitsi.InvokeVoidAsync("executeCommand", "stopShareVideo");
    }

    public async Task DisposeJitsiApi()
    {
        if (_jitsi == null) return;
        await _jitsi.InvokeVoidAsync("dispose");

        await _jitsi.DisposeAsync();
        _jitsi = null;
    }

    public async ValueTask DisposeAsync()
    {
        startMeetingCancellation.Cancel();
        await DisposeJitsiApi();
        _dotNetObjectReference?.Dispose();
        _disposed = true;
    }

    private bool _dawInitialized = true;
    private bool _dawVisible = true;
    private const string MeetingStyleBase = "display: grid; height: 100%; max-height: 100%;";
    private string MeetingStyle => _dawVisible
                            ? $"{MeetingStyleBase} grid-template-rows: 1fr; grid-template-columns: 1fr min-content 1fr; overflow: hidden"
                            : $"{MeetingStyleBase} grid-template-rows: 1fr; grid-template-columns: 1fr min-content min-content; overflow: hidden";

    private const string DawStyleBase = "overflow: auto;";
    private string DawStyle => _dawVisible ? $"{DawStyleBase}" : $"{DawStyleBase} display: none;";

    private void ToggleDaw()
    {
        if (!_dawInitialized) _dawInitialized = true;
        _dawVisible = !_dawVisible;
    }
}