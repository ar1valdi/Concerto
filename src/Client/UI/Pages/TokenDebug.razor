@page "/tokendebug"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject ITranslationsService t

<PageTitle>@t.T("tokenDebug", "pageTitle")</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">@t.T("tokenDebug", "homeHeader")</MudText>
<MudText Class="mb-8">@t.T("tokenDebug", "welcome")</MudText>

<h3>@t.T("tokenDebug", "claimsHeader")</h3>

<button @onclick="GetClaimsPrincipalData">@t.T("tokenDebug", "getClaimsButton")</button>

<p>@authMessage</p>

@if (claims.Count() > 0)
{
	<ul>
		@foreach (var claim in claims)
		{
			<li>@claim.Type: @claim.Value</li>
		}
	</ul>
}

<p>@surnameMessage</p>

@code {

	[CascadingParameter]
	private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

	private string authMessage = null!;
	private string surnameMessage = null!;
	private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

	private async Task GetClaimsPrincipalData()
	{
		var authState = await authenticationStateTask;
		var user = authState.User;
		var test = user.IsInRole("user");
		var id = user.Identity as ClaimsIdentity;
		var x = id!.RoleClaimType;


		if (user.Identity!.IsAuthenticated)
		{
            authMessage = $"{user.Identity.Name}{t.T("tokenDebug", "isAuthenticatedSuffix")}";
			claims = user.Claims;
			surnameMessage =
				$"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
		}
		else
		{
            authMessage = t.T("tokenDebug", "notAuthenticated");
		}
	}

}