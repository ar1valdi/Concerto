@page "/recorder"
@using Concerto.Client.Services;
@using Concerto.Shared.Models.Dto;
@inject IJSRuntime JS
@inject IStorageService StorageService
@inject IDialogService DialogService
@implements IAsyncDisposable

<PageTitle>@($"Video recorder")</PageTitle>

<style>
    .container {
        height: 100%;
        width: 100%;


    }

    .buttons {
        grid-area: buttons;
    }

    .buttons > * {
        margin-right: 8px;
    }


    .preview {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: calc(100% - 44px);
    }

    .preview video {
        object-fit: contain;
    }


</style>

@if (LayoutState.IsMobile)
{
    <div class="d-flex align-center justify-center" style="height: 100%">
        <MudText role="alert" Style="text-align: center; margin:auto;" Typo="Typo.h4">Feature unavailable on mobile devices</MudText>
    </div>
}
else
{
    <div class="container pa-1">
        <div class="buttons d-flex py-1 ">
            <MudText Typo="Typo.caption" Style="align-self: center; margin-right: 8px; color: #666;">
                Audio only recording
            </MudText>

            @if(!IsRecordingPending)
            {
                @if (!IsRecording)
                {
                    <MudButton StartIcon="@Icons.Material.Filled.FiberManualRecord" IconColor="Color.Error" Color="Color.Success" Variant="Variant.Filled" DisableElevation="true" OnClick="StartRecording">
                        Record
                    </MudButton>
                }
                else
                {
                    <MudButton StartIcon="@Icons.Material.Filled.Stop" IconColor="Color.Default" Color="Color.Error" Variant="Variant.Filled" DisableElevation="true" OnClick="StopRecording">
                        Stop
                    </MudButton>
                }
            }
            else
            {
                <MudButton StartIcon="@Icons.Material.Filled.CloudUpload" Color="Color.Success" Variant="Variant.Filled" DisableElevation="true" OnClick="SaveRecording"  Disabled="@string.IsNullOrWhiteSpace(RecordingName)">
                    Save in workspace
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Save" Color="Color.Success" Variant="Variant.Filled" DisableElevation="true" OnClick="SaveRecordingLocally" Disabled="@string.IsNullOrWhiteSpace(RecordingName)">
                    Save on computer
                </MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Variant="Variant.Filled" DisableElevation="true" OnClick="DiscardRecording"> 
                    Discard
                </MudButton>

                <MudInput @bind-Value="RecordingName" Placeholder="Recording name" Immediate="true" Label="Recording name" Variant="Variant.Filled" Margin="Margin.None" Class="pa-0" />

            }

            @if (!IsRecordingPending)
            {
                <div class="d-flex px-2">
                    <MudIcon Style="align-self: center; margin-right: 2px;" Icon="@Icons.Material.Filled.Mic" />
                    <select style="align-self: stretch; flex-shrink: 1; max-width: 150px;" onclick="@(() => FetchMediaInputs())" @bind="SelectedAudioInputId">
                        @foreach (var input in audioInputs)
                        {
                            <option value="@input.Id">@input.Name</option>
                        }
                        @if (!audioInputs.Any())
                        {
                            <option value="@string.Empty">None</option>
                        }
                    </select>
                </div>

                <div class="d-flex ">
                    <MudIcon Style="align-self: center; margin-right: 2px;" Icon="@Icons.Material.Filled.CameraAlt" />
                    <select style="align-self: stretch; flex-shrink: 1; max-width: 150px;" onclick="@(() => FetchMediaInputs())" @bind="SelectedVideoInputId">
                        <option value="@string.Empty">None (Audio only)</option>
                        @foreach (var input in videoInputs)
                        {
                            <option value="@input.Id">@input.Name</option>
                        }
                    </select>
                </div>
            }
        </div>

        <div id="recorderPreview" class="preview">

        </div>

    </div>
}


@code {
    [CascadingParameter] LayoutState LayoutState { get; set; } = LayoutState.Default;

    private (string Name, string Id)[] audioInputs = Array.Empty<(string Name, string Id)>();
    private (string Name, string Id)[] videoInputs = Array.Empty<(string Name, string Id)>();

    private string _selectedAudioInputId = string.Empty;
    private string _selectedVideoInputId = string.Empty;

    private string SelectedAudioInputId
    {
        get { return _selectedAudioInputId; }
        set
        {
            _selectedAudioInputId = value;
            _recordingManager?.InvokeVoidAsync("setMicrophone", value).AndForget();
        }
    }

    private string SelectedVideoInputId
    {
        get { return _selectedVideoInputId; }
        set
        {
            _selectedVideoInputId = value;
            _recordingManager?.InvokeVoidAsync("setWebcam", value).AndForget();
        }
    }




    bool IsRecording { get; set; } = false;
    bool IsRecordingPending { get; set; } = false;
    IJSStreamReference? _recording = null;
    string? _extension = null;
    private string RecordingName { get; set; } = string.Empty;

    private string RecordingFilename => $"{RecordingName}.{_extension}";



    private DotNetObjectReference<RecordingTool> _dotNetObjectReference = null!;
    IJSObjectReference? _recordingManager;

    class MediaDevices
    {
        public string[] Names { get; set; } = null!;
        public string[] Ids { get; set; } = null!;
    }

    protected override void OnInitialized()
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _recordingManager = await JS.InvokeAsync<IJSObjectReference>("initializeRecordingManager", "recorderPreview", _dotNetObjectReference);
            await FetchMediaInputs();
        }
    }


    private async Task FetchMediaInputs()
    {
        var audioDevices = await GetAudioInputs();
        var videoDevices = await GetVideoInputs();

        audioInputs = audioDevices.Names.Zip(audioDevices.Ids, (name, id) => (name, id)).ToArray();
        videoInputs = videoDevices.Names.Zip(videoDevices.Ids, (name, id) => (name, id)).ToArray();

        if (string.IsNullOrEmpty(SelectedAudioInputId) && audioInputs.Length > 0)
            SelectedAudioInputId = audioInputs[0].Id;

        if (string.IsNullOrEmpty(SelectedVideoInputId) && videoInputs.Length > 0)
            SelectedVideoInputId = videoInputs[0].Id;

        StateHasChanged();
    }


    private async Task SetVideoInput(ChangeEventArgs args)
    {
        if (_recordingManager is null) return;
        var value = args.Value?.ToString();
        await _recordingManager.InvokeVoidAsync("setWebcam", value);
    }

    private async Task SetAudioInput(ChangeEventArgs args)
    {
        if (_recordingManager is null) return;
        var value = args.Value?.ToString();
        await _recordingManager.InvokeVoidAsync("setMicrophone", value);
    }

    public async Task StartRecording()
    {
        if (_recordingManager is null) return;
        await _recordingManager.InvokeVoidAsync("startRecording");
    }

    public async Task StopRecording()
    {
        if (_recordingManager is null) return;
        await _recordingManager.InvokeVoidAsync("stopRecording");
    }

    [JSInvokable]
    public void RecordingStateChanged(bool state)
    {
        IsRecording = state;
        StateHasChanged();
    }

    [JSInvokable]
    public void RecordingFinished(IJSStreamReference recording, string extension)
    {
        IsRecording = false;
        IsRecordingPending = true;
        _recording = recording;
        _extension = extension;
        RecordingName = $"Recording-{DateTime.Now:yyyy-MM-dd-HH-mm-ss}";
        StateHasChanged();
    }

    public async Task DiscardRecording()
    {
        await FinalizeRecording();
    }

    public async Task SaveRecording()
    {
        var destinationFolder = await DialogService.ShowSelectFolderDialog("Select folder for recording", "Save here");
        if (destinationFolder is null) return;
        if (_recording is null) return;
        if (string.IsNullOrWhiteSpace(RecordingName)) return;

        StorageService.QueueFileToUpload(destinationFolder.Id, _recording, RecordingFilename);

        await FinalizeRecording();
    }

    public async Task SaveRecordingLocally()
    {
        if (_recordingManager is null) return;
        await _recordingManager.InvokeVoidAsync("saveLocally", RecordingName);
        await FinalizeRecording();
    }

    public async Task FinalizeRecording()
    {
        if (_recordingManager is null) return;

        IsRecordingPending = false;
        _recording = null;
        await _recordingManager.InvokeVoidAsync("finalizeRecording");
        StateHasChanged();
    }

    private async Task<MediaDevices> GetAudioInputs()
    {
        return await JS.InvokeAsync<MediaDevices>("getAudioInputs");
    }

    private async Task<MediaDevices> GetVideoInputs()
    {
        return await JS.InvokeAsync<MediaDevices>("getVideoInputs");
    }


    public async ValueTask DisposeAsync()
    {
        if (IsRecording)
            await StopRecording();

        if (_recordingManager is not null)
            await _recordingManager.InvokeVoidAsync("dispose");

        _dotNetObjectReference?.Dispose();
    }

}