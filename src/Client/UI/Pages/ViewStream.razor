@page "/viewstream/{StreamId}"
@using Concerto.Client.Services;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>View Stream - @StreamId</PageTitle>

<style>
    .container {
        height: 100%;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .stream-video {
        width: 100%;
        max-width: 800px;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .stream-info {
        background: #f5f5f5;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
        text-align: center;
    }

    .stream-id {
        font-family: monospace;
        font-size: 20px;
        font-weight: bold;
        color: #1976d2;
    }

    .loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
    }

    .error {
        color: #f44336;
        text-align: center;
    }
</style>

<div class="container pa-4">
    @if (IsLoading)
    {
        <div class="loading">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h6">Connecting to stream...</MudText>
        </div>
    }
    else if (HasError)
    {
        <div class="error">
            <MudText Typo="Typo.h5" Color="Color.Error">@ErrorMessage</MudText>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GoBack" Class="mt-4">
                Go Back
            </MudButton>
        </div>
    }
    else
    {
        <div class="stream-info">
            <MudText Typo="Typo.h6">Watching Stream</MudText>
            <div class="stream-id">@StreamId</div>
            <MudText Typo="Typo.caption">Stream ID: @StreamId</MudText>
        </div>

        <video id="streamVideo" class="stream-video" autoplay muted controls>
            Your browser does not support the video tag.
        </video>

        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="GoBack" Class="mt-4">
            Leave Stream
        </MudButton>
    }
</div>

@code {
    [Parameter] public string StreamId { get; set; } = string.Empty;

    bool IsLoading { get; set; } = true;
    bool HasError { get; set; } = false;
    string ErrorMessage { get; set; } = string.Empty;

    private DotNetObjectReference<ViewStream> _dotNetObjectReference = null!;
    IJSObjectReference? _viewerManager;

    protected override void OnInitialized()
    {
        _dotNetObjectReference = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _viewerManager = await JS.InvokeAsync<IJSObjectReference>("initializeStreamViewer", "streamVideo", StreamId, _dotNetObjectReference);
            }
            catch (Exception ex)
            {
                HasError = true;
                ErrorMessage = "Failed to connect to stream: " + ex.Message;
                IsLoading = false;
                StateHasChanged();
            }
        }
    }

    [JSInvokable]
    public void StreamConnected()
    {
        IsLoading = false;
        HasError = false;
        StateHasChanged();
    }

    [JSInvokable]
    public void StreamError(string error)
    {
        IsLoading = false;
        HasError = true;
        ErrorMessage = error;
        StateHasChanged();
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        if (_viewerManager is not null)
            await _viewerManager.InvokeVoidAsync("dispose");

        _dotNetObjectReference?.Dispose();
    }
}
