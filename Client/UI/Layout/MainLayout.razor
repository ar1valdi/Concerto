@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Extensions.Options
@using Microsoft.AspNetCore.Components.Authorization
@using Blazored.LocalStorage
@inherits LayoutComponentBase

@inject NavigationManager Navigation
@inject IOptionsSnapshot<RemoteAuthenticationOptions<ApiAuthorizationProviderOptions>> Options
@inject ISyncLocalStorageService LocalStorage
@inject IAppSettingsService AppSettingsService
@inject IJSRuntime JS

<CustomStyleProvider DarkMode="@_layoutState.DarkMode" />
<MudThemeProvider @bind-IsDarkMode="@_layoutState.DarkMode" />
<CascadingValue Value="@_layoutState">
	<MudDialogProvider CloseOnEscapeKey="true" DisableBackdropClick="true" MaxWidth="MaxWidth.Large" CloseButton="true" />
</CascadingValue>
<MudSnackbarProvider />
<MudBreakpointProvider OnBreakpointChanged="OnBreakpointChanged" />

<CascadingValue Value="@_layoutState">
	<MudLayout Style="height: 100vh;">
		<MudAppBar Elevation="0" Dense="true">
			<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(e => DrawerToggle())" />
			<NavigationToolbar />
			<AuthorizeView Policy="@AuthorizationPolicies.IsAuthenticated.Name">
				<Authorized>
					<UploadManager />
					<MudMenu Dense="true" AnchorOrigin="Origin.BottomRight">
						<ActivatorContent>
							<MudButton title="Account">
								<ChildContent>
									<MudIcon Style="color: var(--mud-palette-appbar-text)" Icon="@Icons.Material.Sharp.Person" Size="AppbarIconSize" />
									<MudIcon Style="color: var(--mud-palette-appbar-text); margin-left: -10px" Icon="@Icons.Material.Filled.ArrowDropDown" Size="AppbarIconSize" />
								</ChildContent>
							</MudButton>
						</ActivatorContent>
						<ChildContent>
							<MudMenuItemW Style="pointer-events: none;" Icon="@Icons.Material.Filled.PermIdentity">
								@context.User.Identity?.Name
							</MudMenuItemW>
							<MudLink Color="Color.Default" Underline="Underline.None" Target="_blank" Href="@AppSettingsService.AppSettings.AccountManagementUrl">
							<MudMenuItemW Icon="@Icons.Material.Filled.ManageAccounts">
									<MudStack Row="true" Class="">
										<MudText Typo="Typo.body2">Manage account</MudText>
										<MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.OpenInNew" />
									</MudStack>
							</MudMenuItemW>
							</MudLink>
							<MudMenuItemW Icon="@(_layoutState.DarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" OnTouch="()=> toggleDarkMode(!_layoutState.DarkMode)" OnClick="() => toggleDarkMode(!_layoutState.DarkMode)">Toggle theme</MudMenuItemW>
							<MudMenuItemW Icon="@Icons.Material.Filled.Help" OnTouch="GoToManual" OnClick="GoToManual">User manual</MudMenuItemW>
							<MudMenuItemW Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error" OnTouch="BeginLogout" OnClick="BeginLogout">Log out</MudMenuItemW>
						</ChildContent>
					</MudMenu>
				</Authorized>
				<NotAuthorized>
					<MudButton Href="manual" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Help">User manual</MudButton>
					<MudStack Row="true">
						<MudButton Href="authentication/login" Variant="Variant.Text" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Login">Sign in</MudButton>
					</MudStack>
				</NotAuthorized>
			</AuthorizeView>
		</MudAppBar>
		<MudDrawer @bind-Open="_drawerOpen" Elevation="1">
			<MudDrawerHeader>
				<MudStack Row="true" AlignItems="AlignItems.Center">
					<MudText Typo="Typo.h4">Concerto</MudText>
				</MudStack>

			</MudDrawerHeader>
			<NavMenu />
			<div style="flex-grow: 1;" />
			<MudLink Class="px-4" Typo="Typo.caption" Target="blank" Href="https://www.linkedin.com/in/maciej-zakrzewski-16aa10202">© 2022-2024 Maciej Zakrzewski</MudLink>
		</MudDrawer>
		<MudMainContent Class="pt-12 d-flex" Style="height: 100%">
			<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Style="overflow: auto" Class="px-0 flex-grow-1">
				@Body
			</MudContainer>
		</MudMainContent>
	</MudLayout>
</CascadingValue>
@code {

	[CascadingParameter]
	private Task<AuthenticationState>? authenticationStateTask { get; set; }

	private LayoutState _layoutState = new LayoutState { Breakpoint = Breakpoint.Always, DarkMode = false };

	Size AppbarIconSize => _layoutState.Xs ? Size.Medium : Size.Large;

	bool _drawerOpen = true;

	void DrawerToggle()
	{
		_drawerOpen = !_drawerOpen;
	}

	private void BeginLogout()
	{
		Navigation.NavigateToLogout("authentication/logout");
	}

	private void GoToManual()
	{
		Navigation.NavigateTo("manual");
	}

	private void LogIn()
	{
		Navigation.NavigateToLogin(Options.Get(
			Microsoft.Extensions.Options.Options.DefaultName)
			.AuthenticationPaths.LogInPath);
	}

	private void toggleDarkMode(bool darkMode)
	{
		LocalStorage.SetItem("darkMode", darkMode);
		_layoutState = _layoutState with { DarkMode = darkMode };
	}

	protected override void OnInitialized()
	{
		var updatedLayout = _layoutState with { };

		if (LocalStorage.ContainKey("darkMode"))
			updatedLayout.DarkMode = LocalStorage.GetItem<bool>("darkMode");
		else
			LocalStorage.SetItem("darkMode", _layoutState.DarkMode);

		if (LocalStorage.ContainKey("isMobile"))
			updatedLayout.IsMobile = LocalStorage.GetItem<bool>("isMobile");
		if (LocalStorage.ContainKey("isIos"))
			updatedLayout.IsIos = LocalStorage.GetItem<bool>("isIos");

		_layoutState = updatedLayout;
	}

	private void OnBreakpointChanged(Breakpoint breakpoint)
	{
		_layoutState = _layoutState with { Breakpoint = breakpoint };
	}

}