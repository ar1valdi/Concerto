@using Concerto.Client.Extensions
@using Concerto.Client.Services
@using Concerto.Shared.Models.Dto
@inject ISessionService SessionService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation


@if (Loading)
{
	<MudSkeleton Animation="Animation.Wave" SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%"></MudSkeleton>
}
else
{
	<div>
		<MudStack Spacing="4" Class="pa-4" Style="overflow: auto; justify-items: start;">
			<MudStack Row="true" Style="background-color: var(--mud-palette-default)" Justify="Justify.SpaceBetween">
				<MudButtonGroup OverrideStyles="false">
					<MudButton OnClick="Discard" Disabled="!Changed" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Restore" Color="Color.Error">Discard</MudButton>
					<MudButton OnClick="Save" Disabled="!Changed" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Success">Save</MudButton>
				</MudButtonGroup>
				<MudButtonGroup OverrideStyles="false">
					<MudButton OnClick="Delete" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Delete session</MudButton>
				</MudButtonGroup>
			</MudStack>

			<MudTextField Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Title" Immediate="true" @bind-Value="_request.Name" T="string" Label="Name" />
			<MudDatePicker Adornment="Adornment.Start" Label="Date" @bind-Date="Date" />
			<MudTimePicker Adornment="Adornment.Start" Label="Time" @bind-Time="Time" />

		</MudStack>
	</div>
}




@code {

	[Parameter]
	public long SessionId { get; set; }

	[Parameter]
	public EventCallback OnSessionDeleted { get; set; }

	[Parameter]
	public EventCallback OnSessionUpdated { get; set; }

	private bool Loading => _sessionSettings is null || _request is null;
	private bool Changed => _request is not null && (_request.Name != _sessionSettings?.Name || _request.ScheduledDateTime != _sessionSettings?.ScheduledDate);
	private SessionSettings? _sessionSettings { get; set; }
	private UpdateSessionRequest _request = null!;

	private DateTime? Date
	{
		get => _request.ScheduledDateTime.Date;
		set
		{
			if (value is not null && Time is not null)
			{
				_request.ScheduledDateTime = value.Value + Time.Value;
			}
		}
	}

	private TimeSpan? Time
	{
		get => _request.ScheduledDateTime.TimeOfDay;
		set
		{
			if (value is not null && Date is not null)
			{
				_request.ScheduledDateTime = Date.Value + value.Value;
			}
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await Initialize();
	}

	protected override async Task OnParametersSetAsync()
	{
		if (_sessionSettings is null || _sessionSettings.Id != SessionId)
		{
			await Initialize();
		}
	}

	private async Task Initialize()
	{
		_sessionSettings = await SessionService.GetSessionSettingsAsync(SessionId);
		_request = new UpdateSessionRequest
		{
			SessionId = _sessionSettings.Id,
			Name = _sessionSettings.Name,
			ScheduledDateTime = _sessionSettings.ScheduledDate
		};
	}


	private async Task Discard()
	{
		await Initialize();
	}

	private async Task Save()
	{
		_sessionSettings = null;

		try
		{
			await SessionService.UpdateSessionAsync(_request);
			Snackbar.Add("Session updated", Severity.Success);
			OnSessionUpdated.InvokeAsync().AndForget();
		}
		catch
		{
			Snackbar.Add("Failed to update session", Severity.Error);
		}
		await Initialize();
	}

	private async Task Delete()
	{
		if (!await DialogService.ShowConfirmationDialog("Delete session", "delete", "session", _sessionSettings!.Name, true)) return;
		try
		{
			await SessionService.DeleteSessionAsync(_sessionSettings.Id);
			Snackbar.Add($"Session {_sessionSettings!.Name} deleted", Severity.Success);
			await OnSessionDeleted.InvokeAsync();
		}
		catch
		{
			Snackbar.Add($"Failed to delete session {_sessionSettings!.Name}.", Severity.Error);
		}
	}

}